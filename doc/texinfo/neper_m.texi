@c This file is part of the Neper software package.
@c Copyright (C) 2003-2021 Romain Quey
@c See the COPYING file in the top-level directory.

@node Meshing Module (-M)
@chapter Meshing Module (-M)

@MM{} is the module for meshing scalar and raster tessellations.  Two
meshing strategies are available. @dfn{Free (or unstructured) meshing}
creates a conforming mesh into tetrahedral elements (triangular in 2D).
@dfn{Mapped (or structured) meshing} generates a
non-conforming mesh into regular hexahedral elements (quadrangular in
2D). Free meshing is carried out so that the elements have
sizes as close as possible to the target value, and show high
quality, that is, with shapes as close to equilateral as possible.  The input file is a tessellation
file (@file{.tess}) or a raster tessellation file (@file{.tesr}), as
provided by @mT{}.  Standard tessellations, multiscale tessellations, and
periodic (or semi-periodic) tessellations are supported.
Free meshing of raster tessellations works for 2D tessellations only.
The output mesh can be written in written at the msh format, which can be
readily used by FEPX, or other formats.

The target element size of the mesh can be specified through the element
@dfn{characteristic @w{length (@samp{cl})}}.  It corresponds to the length of a
1D element, the length of
the edge of a triangular or quadrangular element (2D), and the length of
an edge of a tetrahedral or hexahedral element (3D). For convenience, a
@dfn{relative characteristic length (@code{rcl})} is also defined, whose
value is relative to the average cell size and provides a medium number
of elements.  It is also possible to specify @code{cl} (or @code{rcl})
values on a per-cell basis, or to specify different values along @var{x},
@var{y} and @var{z}.

For free meshing,  mesh quality is ensured to the greatest extent
possible using several advanced capabilities,@footnote{See @cite{R.@ Quey,
P.R.@ Dawson and F.@ Barbe, Large-scale 3D random polycrystals for the finite
element method: Generation, meshing and remeshing, Comput.@ Methods Appl.@
Mech.@ Engrg., vol.@ 200, pp.@ 1729-1745, 2011}.}

@itemize
@item Optimized meshing rules.  The mesh properties are controlled by
size parameters (options @option{-cl}, @option{-rcl}, etc.) and a size
gradient parameter used for 1D meshing (option @option{-pl}).

@item Multimeshing.  Each tessellation face and volume is meshed
separately of the others, with several meshing algorithms, until a
target mesh quality is reached.  This is controlled by options
beginning with @option{-meshqual}, and options @option{-mesh2dalgo} and
@option{-mesh3dalgo}.

@end itemize

Note that, in general, tessellation @emph{regularization} is also
necessary to ensure good-quality meshing, see @ref{Tessellation Module
(-T)}.

Remeshing can also be applied to generate a new, good-quality
mesh from a mesh containing poor-quality elements.  The variables
defined on the parent mesh can be transported on the child mesh (options
beginning with @option{-transport}).

For mapped meshing, mesh cleaning options enable the removal of
isolated elements or duplicate nodes, or to duplicate nodes subjected to
singularity behavior (options @option{-clean}, @option{-dupnodemerge}
and @option{-singnodedup}).

Mesh partitioning allows for the division the mesh nodes and
elements into several sets while minimizing the interfaces between
them@footnote{Each partition being assigned to a computation core in the finite
element calculation, the minimization of the interfaces between the
partitions is done in terms of the number of necessary communications
between computation cores.}, for parallel finite element calculations.  It is
mandatory for parallel simulations with FEPX.
Partitioning can return any number of partitions or, more efficiently,
can be carried out according to a given parallel computer architecture
(options beginning with @option{-part}).

In the output mesh, the individual entities of the tessellations (the
vertices, edges, faces and polyhedra) can be described by element
sets (option @option{-dim}).  Node sets of the vertices, edges
and faces of the boundary of the tessellation are also provided for
prescribing the boundary conditions (option @option{-nset}).  The
surface element sets are also provided (option @option{-faset}).
Element sets other than those corresponding to the tessellation cells can be
defined (option @option{-elset}). The
mesh order can be 1 or 2 (option @option{-order}).
Statistical data can be obtained on the meshes (options beginning with
@option{-stat}).

Here is what a typical run of @mM{} looks like:
@sp 1

@example
$ neper -M n10-id1.tess

========================    N   e   p   e   r    =======================
Info   : A software package for polycrystal generation and meshing.
Info   : Version 4.0.0
Info   : Built with: gsl|muparser|opengjk|openmp|nlopt|libscotch (full)
Info   : Running on 8 threads.
Info   : <https://neper.info>
Info   : Copyright (C) 2003-2021, and GNU GPL'd, by Romain Quey.
Info   : No initialization file found (`/home/rquey/.neperrc').
Info   : ---------------------------------------------------------------
Info   : MODULE  -M loaded with arguments:
Info   : [ini file] (none)
Info   : [com line] n10-id1.tess
Info   : ---------------------------------------------------------------
Info   : Reading input data...
Info   :   - Reading arguments...
Info   : Loading input data...
Info   :   - Loading tessellation...
Info   :     [i] Parsing file `n10-id1.tess'...
Info   :     [i] Parsed file `n10-id1.tess'.
Info   : Meshing...
Info   :   - Preparing... (cl = 0.2321) 100%
Info   :   - 0D meshing... 100%
Info   :   - 1D meshing... 100%
Info   :   - 2D meshing... 100% (0.69|0.86/92%| 4%| 4%)
Info   :   - Fixing 2D-mesh pinches...
Info   :   - 3D meshing... 100% (0.89|0.91/100%| 0%| 0%)
Info   : Searching nsets and fasets...
Info   : Writing mesh results...
Info   :   - Preparing mesh...
Info   :   - Mesh properties:
Info   :     > Node number:      295
Info   :     > Elt  number:     1063
Info   :     > Mesh volume:    1.000
Info   :   - Writing mesh...
Info   :     [o] Writing file `n10-id1.msh'...
Info   :     [o] Wrote file `n10-id1.msh'.
Info   : Elapsed time: 1.127 secs.
========================================================================
@end example

@page
@section Arguments

@subsection Prerequisites

@req{-gmsh, path_name,
Specify the path of the Gmsh binary (for meshing into
triangle and tetrahedral elements).,
any, gmsh}

@req{-tmp, path_name,
Specify the path of the temporary directory (used by Gmsh).,
any, "."}

@subsection Input Data

In normal use, the input data is a tessellation file, a raster
tessellation file or a mesh file,

@inp{, file_name,
Specify the name of the input file. It can be
a tessellation file (@file{.tess})@comma{}
a raster tessellation file (@file{.tesr}) or a mesh file for
remeshing (@file{.msh}).
To load several of them (namely@comma{} both a tessellation file and a mesh
file for remeshing)@comma{} combine them with @samp{@SEPNODEP}.
To overwrite the coordinates of the nodes of a mesh@comma{} use the
syntax @samp{@var{file_name}@SEPDEP{}@var{nodecoo_file_name}}@comma{} where
@file{@var{file_name}} is the name of the mesh file and
@file{@var{nodecoo_file_name}} is the name of the file containing the
coordinates of the nodes (see @ref{Position File}).
To load only a subregion of a raster tessellation@comma{} use the
syntax
@samp{@var{file_name}:crop(@var{xmin},@var{xmax},@var{ymin},@var{ymax},@var{zmin},@var{zmax})}@comma{}
where
@samp{@var{xmin}}@comma{} @samp{@var{xmax}}@comma{}
@samp{@var{ymin}}@comma{} @samp{@var{ymax}}@comma{}
@samp{@var{zmin}} and @samp{@var{zmax}} are the minimum and maximum positions along
@var{x}@comma{} @var{y} and @var{z}@comma{} respectively.
For 2D raster tessellations@comma{} the @var{z} boundaries can be omitted.
To scale the number of points of a raster tessellation@comma{} use
@samp{@var{file_name}:scale(@var{factor})}@comma{}
where @code{@var{factor}} is the
scaling factor@comma{} or
@samp{@var{file_name}:scale(@var{factor_x},@var{factor_y},@var{factor_z})}@comma{}
where @code{@var{factor_x}}@comma{} @code{@var{factor_y}} and
@code{@var{factor_z}} are the
scaling factor along @var{x}@comma{} @var{y} and @var{z}@comma{}
respectively.
For 2D raster tessellations@comma{} the @var{z} factor can be omitted.
,
any, none}

It is also possible to load a mesh to be considered as output mesh (in contrast to loading it as input file).  Use @w{option @option{-o}} to avoid overwriting the file.  If the file contains meshes of dimensions lower than the tessellation's dimension, these meshes are used and only higher-dimension meshes are generated.

@kindex -loadmesh
@inp{-loadmesh, file_name,
Load a mesh from a file (@file{.msh} format).
,
any, none}

Finally, it is possible to load a set of points.  These points are used
only for statistics, in option @option{-statpoint},

@kindex -loadpoint
@inp{-loadpoint, file_name,
Load points from a file.
See @ref{Position File} for the file format.
Provide as argument the file name.
,
any, none}

@subsection Meshing Options

@opt{-elttype, char_string,
Specify the type of elements@comma{} among
@samp{tri}   for triangular elements@comma{}
@samp{quad}  for quadrangular elements@comma{}
@samp{quad9} for 9-node quadrangular elements@comma{}
@samp{tet}   for tetrahedral elements and
@samp{hex}   for hexahedral elements.
(In 2D@comma{} @samp{tet} and @samp{hex} are treated as @samp{tri} and
@samp{quad}@comma{} respectively.)
,
see above, tet in 3D and tri in 2D}

@opttwo{-cl, -rcl, -cl or -rcl, real,
Specify the absolute or relative characteristic length of the elements.
@code{rcl} is defined relative to the average cell size.
The default@comma{} @code{-rcl 1}@comma{} leads to a mesh with about 100 elements per
cell in average (@w{64 in 2D}).
For free meshing@comma{} it is also possible to define the characteristic length
on a per-cell basis@comma{} using any mathematical expression based on the
variables defined in @ref{Tessellation Keys} (or @ref{Raster Tessellation Keys} for a
2D raster tessellation).
A typical use is @samp{-rcl
(body>0)?@var{val1}:@var{val2}} to get interior cells
meshed with @code{@var{rcl}=@var{val1}} and boundary cells
meshed with @code{@var{rcl}=@var{val2}}.
The second way is to load values from an external file using
@samp{file(@var{file_name})}@comma{} where @code{@var{file_name}}
is the name of the file containing the characteristic length values.
,
any, -rcl 1}

@opt{-dim, char_string,
Specify the meshing dimension. By default@comma{} it is equal to the
input data dimension@comma{} @w{@code{@samp{inputdim}}}. To get meshes of
several dimensions in output@comma{} provide the values combined @w{with
@samp{@SEPNODEP{}}}. Provide @code{@samp{all}} for all and
@code{@samp{none}} for none.  Note that the meshes of all dimensions are
always written into a @file{.msh} mesh file unless
@samp{@SEPDEP{}msh} is appended to the option argument.
If a mesh dimension of 3 is required@comma{} but the input data is 2D@comma{}
the 2D mesh is extruded into a 3D mesh (still made of tetahedra).
With @samp{-format geof}@comma{} use @samp{1,inputdim}
to get the 1D mesh written as lisets.
,
0 to 3@comma{} all@comma{} none@comma{} inputdim, inputdim}

@opt{-order, integer,
Specify the mesh order.
A value of 1 corresponds to 2-node linear elements@comma{} 3-node triangular elements@comma{}
4-node quadrangular elements@comma{} 4-node tetrahedral elements and
8-node hexahedral elements@comma{}
and a value of 2 corresponds to 3-node linear elements@comma{} 6-node triangular elements@comma{}
8-node or 9-node quadrangular elements@comma{} 10-node tetrahedral elements and
20-node hexahedral elements.
,
1 or 2,1}

@opttwosec{-clface, -rclface, -clface or -rclface, real,
Specify the absolute or relative characteristic length of the elements@comma{} on a per-face basis.
Provide as argument any mathematical expression based on the
variables defined in @ref{Tessellation Keys}
or @samp{default} (the value inherited from the parent polyhedra).
A typical use is @samp{-rcl
(domface==@var{id})?@var{val}:default} to get a finer mesh at domain surface @code{@var{id}}.
The second way is to load values from an external file using
@samp{file(@var{file_name})}@comma{} where @code{@var{file_name}}
is the name of the file containing the characteristic length values.
,
any, none}

@opttwosec{-cledge, -rcledge, -cledge or -rcledge, real,
Specify the absolute or relative characteristic length of the elements@comma{} on a per-edge basis.
Provide as argument any mathematical expression based on the
variables defined in @ref{Tessellation Keys}
or @samp{default} (the value inherited from the parent faces).
A typical use is @samp{-rcl
(domedge==@var{id})?@var{val}:default} to get a finer mesh at domain edge @code{@var{id}}.
The second way is to load values from an external file using
@samp{file(@var{file_name})}@comma{} where @code{@var{file_name}}
is the name of the file containing the characteristic length values.
,
any, none}

@opttwosec{-clver, -rclver, -clver or -rclver, real,
Specify the absolute or relative characteristic length of the elements@comma{} on a per-vertex basis.
Provide as argument any mathematical expression based on the
variables defined in @ref{Tessellation Keys}
or @samp{default} (the value inherited from the parent edges).
A typical use is @samp{-rcl
(domver==@var{id})?@var{val}:default} to get a finer mesh at domain vertex @code{@var{id}}.
The second way is to load values from an external file using
@samp{file(@var{file_name})}@comma{} where @code{@var{file_name}}
is the name of the file containing the characteristic length values.
,
any, none}

@optsec{-pl, real,
Specify the progression factor for the element characteristic lengths. This value is
the maximum ratio between the lengths of two adjacent 1D elements.,
any >= 1, 2}

@optsec{-clratio, char_string,
Specify the ratios between the @var{cl} values along the different
coordinate axes. Provide the values combined with
@samp{@SEPDEP{}}. For example@comma{} @samp{2:1:1} leads to elements
twice as long in the x direction as in the y and z directions.
,
none, any}

@optnrc{-clmin, real,
Specify the minimum characteristic length of the elements.,
any, none}
@c @optdevel{-meshface, expression,
@c Specify the faces to mesh. The argument can be: @samp{all} for
@c all@comma{} @samp{file(@var{file_name})} to load face numbers from a
@c file@comma{} or any expression based on the following arguments:
@c @var{cenx}@comma{} @var{ceny}@comma{} @var{cenz}@comma{}
@c @var{volume}@comma{}
@c @var{true}@comma{} @var{body}@comma{} and
@c @var{id}.,
@c any, all}
@c
@c @optdevel{-meshpoly, expression,
@c Specify the polyhedra to mesh. The argument can be: @samp{all} for
@c all@comma{} @samp{file(@var{file_name})} to load polyhedron numbers from a
@c file@comma{} or any expression based on the following arguments:
@c @var{cenx}@comma{} @var{ceny}@comma{} @var{cenz}@comma{}
@c @var{volume}@comma{}
@c @var{true}@comma{} @var{body}@comma{} and
@c @var{id}.,
@c any, all}

@sp 1
The following options define the multimeshing algorithm (for 2D and 3D
free meshings). @dfn{Multimeshing} consists of using several meshing
algorithms concurrently, for each face or polyhedron, until a minimum,
target mesh quality is reached. The mesh quality factor, @math{O},
accounts for both the element sizes and aspect ratios. It is given by
@tex
$
O = {O_{dis}}^\alpha \times {O_{size}}^{1-\alpha}
$,
@end tex
@ifinfo
@example
O = O_dis^alpha x O_size^(1-alpha),
@end example
@end ifinfo
where @math{O_{dis}} and @math{O_{size}} range from 0 (poor quality) to
1 (high quality) and @math{\alpha} is a factor equal to 0.8.  Therefore,
@math{O} also ranges from 0 (poor quality) to 1 (high quality).@footnote{See @cite{R.@ Quey,
P.R.@ Dawson and F.@ Barbe, Large-scale 3D random polycrystals for the finite
element method: Generation, meshing and remeshing, Comput.@ Methods Appl.@
Mech.@ Engrg., vol.@ 200, pp.@ 1729-1745, 2011}.}
The minimum quality value can be modified using option @option{-meshqualmin}.
The values of @math{O} and @math{O_{dis}} can be modified using options
@option{-meshqualexpr} and @option{-meshqualdisexpr}.
The value of the target mesh quality significantly influences meshing
speed and output mesh quality. A value of 0 provides the fastest
meshing while a value of 1 provides the best-quality meshing. The
default value provides an effective balance.
@c
2D and 3D meshings are achieved using the Gmsh@footnote{@cite{Ch.@
Geuzaine and J.-F. Remacle, Gmsh: a three-dimensional finite element
mesh generator with built-in pre- and post-processing facilities,
International Journal for Numerical Methods in Engineering, 79,
1309--1331, 2009.}} and Netgen@footnote{@cite{J. Schoberl, Netgen, an
advancing front 2d/3d-mesh generator based on abstract rules.  Comput.
Visual.  Sci., 52, 1--41, 1997.}} libraries (options
@option{-mesh2dalgo} and @option{-mesh3dalgo}).

@opt{-meshqualmin, real,
Specify the minimum@comma{} target value of mesh quality@comma{}
@math{@var{O}}@comma{} as defined by option @option{-meshqualexpr}.,
0 to 1, 0.9}

@opt{-meshqualexpr, char_string,
Specify the expression of mesh quality@comma{} @math{@var{O}}@comma{}
as a function of @var{Odis} and @var{Osize}.,
any, Odis^0.8*Osize^0.2}

@optsec{-meshqualdisexpr, char_string,
Specify the expression of the mesh element distortion parameter@comma{}
@math{@var{Odis}}@comma{} as a function of the element distortion
parameter @var{dis}.,
any, dis^(exp((dis^0.1)/(dis^0.1-1)))}

@optsec{-mesh2dalgo, char_string,
Specify the 2D meshing algorithms@comma{} combined with @samp{@SEPNODEP}.
The available
values are @code{mead} (MeshAdapt)@comma{} @code{dela} (Delaunay) and
@code{fron} (Frontal).,
mead@comma{} dela@comma{} fron,
mead@SEPNODEP{}dela@SEPNODEP{}fron}

@optsec{-mesh3dalgo, char_string,
Specify the 3D meshing algorithms@comma{} combined with @samp{@SEPNODEP}.
Each algorithm has format
@samp{@var{mesh}@SEPDEP{}@var{opti}}@comma{} where
@code{@var{mesh}} and @code{@var{opti}} stand for the meshing and mesh
optimization algorithms. The available values of @code{@var{mesh}}
are currently limited to @code{netg}
(Netgen).  The available values of @code{@var{opti}} are @samp{gmsh}
(Gmsh)@comma{} @samp{netg} (Netgen)@comma{} @samp{gmne} (@w{Gmsh + Netgen}) and
@samp{none} for none.
,
netg@SEPDEP{}none@comma{} netg@SEPDEP{}gmsh@comma{} netg@SEPDEP{}netg@comma{}
netg@SEPDEP{}gmne,
netg@SEPDEP{}gmsh@SEPNODEP{}netg@SEPDEP{}netg@SEPNODEP{}netg@SEPDEP{}gmne}

@optsec{-interface, char_string,
Specify the type of interface meshing. Provide @samp{continuous} for a
continuous mesh at interfaces@comma{} with shared nodes between
neighbor element sets (which are associated to the tessellation cells).  Provide
@samp{discontinuous} for a discontinuous mesh at interfaces@comma{} with
distinct nodes for the neighbor element sets.  Provide @samp{cohesive} for
cohesive elements at interfaces@comma{} joining the neigbour element
sets.
In the case of a multiscale tessellation@comma{} it is possible to provide
a different value for each scale using the @samp{@SEPFRAC{}} separator
(if fewer values than tessellation scales are provided@comma{} the last
 provided value is used for all higher scales).
See option @option{-faset} for the output format.
,
see above, continuous}

@optsec{-mesh2dpinchfix, logical,
Apply 2D-mesh pinches correction after 2D meshing.  Disable only if you really know what you are doing.,
0 or 1, 1}

@c @optdevel{-mesh3dreport, logical,
@c Report statistical data on the 3D meshing.,
@c 0 or 1, 0}

@subsection Raster Tessellation Meshing Options

Raster tessellation meshing implies interface reconstruction, interface
mesh smoothing then remeshing. The following options enable the control of
interface smoothing.

@iftex
@optsec{-tesrsmooth, char_string,
Method for smoothing the interface meshes reconstructed from raster tessellations.
Laplacian smoothing (@samp{laplacian}) is an iterative method that
modifies the coordinates of a node
using the coordinates of the neighboring nodes.
At iteration @var{i}@comma{} the position of a node@comma{}
@math{X_i}@comma{} is calculated from its previous position@comma{}
@math{X_{i-1}}@comma{} and the position of the barycentre of the
neighboring nodes (weighted barycentre@comma{} considering the inverse of
the distance between the
node and the neighbor)@comma{} @math{X^n_{i-1}}@comma{} as follows:
@math{X_i=(1-A)@,X_{i-1} + A@,X^n_{i-1}}.
@math{A@in@left[0,@,1@right]} is an
adjustable parameter (see option @option{-tesrsmoothfact}). The number
of iterations is set by option @option{-tesrsmoothitermax}.
There is no stop criterion@comma{} so @code{itermax} will always be
reached.,
laplacian or none, laplacian}
@end iftex

@ifinfo
@optsec{-tesrsmooth, char_string,
Specify the method for smoothing the interface meshes reconstructed from raster tessellations.
A common algorithm is laplacian smoothing (@samp{laplacian}) consists
in modifying the coordinates of a node@comma{} @math{X}@comma{}
using the coordinates of the neighboring nodes:
@math{X=(1-A)@,X_n + A@,X_n} where @math{X_n} is the barycentre of the
neighboring nodes. @math{A}@comma{} which belongs to
@math{[0,\,1]}@comma{} is an
adjustable parameter (see option @option{-tesrsmoothfact}). Several
iterations are applied (see option @option{-tesrsmoothitermax}).
There is no stop criterion@comma{} so @code{itermax} will always be
reached.,
laplacian or none, laplacian}
@end ifinfo

@optsec{-tesrsmoothfact, real,
Specify the factor used for the interface mesh smoothing (@math{A} in option
@option{-tesrsmooth}).,
0 to 1, 0.5}

@optsec{-tesrsmoothitermax, integer,
Specify the number of iterations used for interface mesh smoothing.,
any >= 0, 5}

@subsection Mesh Cleaning Options

The following options are specific to mapped meshing of raster
tessellations containing voids.

@optsec{-clean, integer,
Clean the mesh so that it consists of a set of connected elements.
Provide as argument the level of cleaning.
A value of @code{1} indicates that two elements should be considered
connected to each other if they share at least a vertex.
A value of @code{2} indicates that two elements should be considered
connected to each other if they share at least a face.
Using this option@comma{} the elements (or bunches of elements) that
are not connected to the main skeleton are removed.
,
0 to 2,0}

@optsec{-singnodedup, logical,
Duplicate nodes which are the subject of singularity.  Such a node
belongs to several elements which share only a node or an
edge@comma{} which provides a singular behavior:
in Mechanics@comma{} it corresponds to imposing a common
displacement@comma{} while the point can carry no stress@comma{} and
in Thermics@comma{} it corresponds to imposing a given temperature at a
particular location shared by two bodies@comma{} while the location can carry
no heat flux.
When this option is enabled@comma{}
such a node is duplicated@comma{} so that each body has its own node.
Option @option{-dupnodemerge} allows one to merge back duplicate nodes.
,
0 or 1,0}

@optsec{-dupnodemerge, real,
Merge duplicate nodes. Provide as argument the distance between nodes
below which two nodes are merged. Note that Neper does not generate
meshes with duplicate nodes@comma{} except using options
@option{-singnodedup} or @option{-interface}.
,
0, any>0}

@subsection Transformation Options

@opt{-transform, char_string(...),
Apply transformations to a mesh.
The following transformations can be applied:@*
@mybullet @samp{scale(@var{x_fact}@comma{}@var{y_fact}@comma{}@var{z_fact})}
scales a mesh by @code{@var{x_fact}}@comma{} @code{@var{y_fact}} and
@code{@var{z_fact}} along directions @var{x}@comma{} @code{@var{y}} and
@code{@var{z}}@comma{} respectively. For a 2D mesh@comma{} @code{@var{z_fact}}
can be omitted.@*
@mybullet @samp{rotate(@var{axis_x}@comma{}@var{axis_y}@comma{}@var{axis_z}@comma{}@var{angle})}
rotates a mesh about the centre and by an axis/angle pair.@*
@mybullet @samp{translate(@var{dist_x}@comma{}@var{dist_y}@comma{}@var{dist_z})}
translates a mesh by distances @code{@var{dist_x}}@comma{} @code{@var{dist_y}} and @code{@var{dist_z}}
along directions @var{x}@comma{} @var{y} and @var{z}@comma{} respectively.@*
@mybullet @samp{smooth(@var{fact}@comma{}@var{itermax}@comma{}@var{type})}
smooths the interfaces of a mesh by Laplacian smoothing (use only if you know
what you are doing).  Laplacian smoothing is an iterative method that modifies
the coordinates of a node using the coordinates of the neighboring nodes.  At
iteration @var{i}@comma{} the position of a node@comma{} @math{X_i}@comma{} is
calculated from its previous position@comma{} @math{X_{i-1}}@comma{} and the
position of the barycentre of the neighboring nodes (weighted
barycentre@comma{} considering the inverse of the distance between the node and
the neighbor)@comma{} @math{X^n_{i-1}}@comma{} as follows:
@math{X_i=(1-fact)@,X_{i-1} + fact@,X^n_{i-1};@,0@leq{}fact@leq{}1}.
@var{itermax} iterations are applied. @var{type} defines the nodes used for
smoothing and can be @samp{all} for all nodes or @samp{interior} for interior
nodes.@*
@mybullet @samp{explode(@var{fact})} to produce a roughly ``exploded'' mesh@comma{}
for which elsets are apart from each other (or cohesive elements become thick).
To be used in conjunction with @option{-interface discontinuous or cohesive}.
@samp{@var{fact}} is a factor controlling the distance between elsets.@*
@mybullet @samp{slice(@var{d}@comma{}@var{a}@comma{}@var{b}@comma{}@var{c})} slices a 3D mesh by the (oriented) plane of equation @math{a@,x+b@,y+c@,z=d} (yielding to a 2D mesh).
,
see above, none}

@optsec{-sortnode, char_string,
Sort the mesh nodes.  Provide as argument the expression used for sorting and
based on the variables defined in (@pxref{Mesh Keys}). Sorting is done in ascending order.
,
any, none}

@optsec{-sortelt, char_string,
Sort the mesh elements.  Provide as argument the expression used for sorting and
based on the variables defined in (@pxref{Mesh Keys}). Sorting is done in ascending order.
,
any, none}

@subsection Mesh Partitioning Options

Mesh partitioning is achieved using the libScotch
library@footnote{@cite{F.
Pellegrini, Scotch and libScotch 5.1 User's Guide, INRIA Bordeaux
Sud-Ouest, ENSEIRB & LaBRI, UMR CNRS 5800, 2008.}}.  The
principle of mesh partitioning is to create partitions of the same size
while minimizing the interfaces between them. This attempts to distribute an equal load
to all computation units and minimizes communications between them,
and therefore minimizes the total computation time.  There are two
available strategies for mesh partitioning. The first one creates
partitions and arranges them independently of each other, while the second one
consists of optimizing the size and arrangment of the partitions based
on a given computer cluster architecture to minimize computation time
further. For those clusters that are made of nodes containing several cores
each, the communication time between cores on a common node
is much lower than the communication time between cores of different
nodes. To minimize the global communication time, partitions which
are processed by cores of the same node can be grouped together (on modern
architectures, the gain remains marginal).
Partitioning is applied to the higher-dimension mesh and renumbers nodes
and elements by ascending partition number.
This can be managed using options beginning with @option{-part}.

@opt{-part, integer or char_string,
Specify the number of partitions or a computer cluster architecture.
Using the first option@comma{} the number of partition can be any.
At the opposite@comma{} for a computer cluster architecture@comma{}
the total number of partitions must be a power of 2. An
architecture can be specified in two ways.  First@comma{} for clusters
that contain nodes made of several cores@comma{} the number of
nodes and the number of cores per node can be combined using
the @samp{@SEPDEP{}} separator. A ratio of 10 is
considered between the computation time between cores located on
different nodes and the one between cores of the same node.
Second@comma{} the name of a file describing the cluster architecture in
the Scotch format can be provided.
,
any, none}

@optsec{-partmethod, char_string,
Specify the partitioning method. Provide @samp{scotch} for partitioning
using Scotch@comma{} or @samp{linear} for linear partitioning (i.e.@comma{}
partitioning based on the node and element numbers@comma{} not recommended).,
any, scotch}

@subsection Field Transport Options

@opt{-transport, char_string@SEPDEP{}char_string@SEPDEP{}file_name@SEPNODEP{}...,
Transport data from a parent mesh to a child mesh.
The parent mesh is the input mesh and the child mesh is the result mesh
(created by remeshing or loaded
with @option{-loadmesh}).
A transport entry must have format
@samp{@var{entity_type}@SEPDEP{}@var{data_type}@SEPDEP{}@var{file_name}}@comma{}
where
@samp{@var{entity_type}} must be @samp{node} or @samp{elt}@comma{}
@samp{@var{data_type}} is the type of data@comma{} under format
@samp{integer@var{X}} or @samp{real@var{X}}@comma{} where @code{@var{X}} is the
dimension@comma{} and @code{@var{file_name}} is the name of the file
containing the parent data.  For several data transports@comma{} combine
the transport entries with @samp{@SEPNODEP}. Nodal data are transported
by interpolation using the shape functions (2D only).  Elemental data are transported
as specified by @option{-transporteltmethod}.
,
any,none}

@optsec{-transporteltmethod, char_string@SEPDEP{}char_string...,
Specify the method to transport elemental data from the parent mesh to the
child mesh. For each element of the child mesh@comma{} its centre@comma{}
@var{c}@comma{} is considered.  Use @samp{distance} to choose@comma{}
for each element of the child mesh (of centre @var{c})@comma{} the element of
the parent mesh whose centre is the closest to @var{c}@comma{}
or @samp{location} to choose the element @var{c} belongs to.
,
see above,distance}

@subsection Output Options

@opt{-o, file_name,
Specify the output file name.,
any, input basename}

@opt{-format, char_string,
Specify the format of the output file(s). Mesh
formats are: the native (Gmsh-style) @samp{msh}@comma{} the Gmsh @w{version 4} @samp{msh4}@comma{}
the @w{VTK @samp{vtk}}@comma{}
the @w{Abaqus @samp{inp}} and the Z-set @samp{geof}.
For @samp{msh}@comma{} append
@samp{@SEPDEP{}@var{format}} to specify the format@comma{}
which can be @samp{ascii} or @samp{binary} (default @samp{ascii}).
To get the orientation section of the @samp{msh} file (optional FEPX input)@comma{} provide @samp{ori}.
To get the group section of the @samp{msh} file (optional @samp{.phase} FEPX input)@comma{} provide @samp{phase}.
To get a boundary conditions file (optional FEPX input)@comma{} provide @samp{bcs}.
To get a periodicity file@comma{} provide @samp{per}.
To get a tessellation file (reconstructed from the mesh) @comma{} provide @samp{tess}.
Combine arguments with @samp{@SEPNODEP}.,
see above, msh}

@opt{-nset, char_string,
Specify the node sets to provide@comma{} among:
@code{faces}@comma{} @code{edges}@comma{} @code{vertices} for all
domain faces@comma{} edges and vertices@comma{}
and @code{facebodies} and @code{edgebodies} for all face and edge
bodies (interiors). Provide @code{all} for all and @code{none} for none.
To get the node sets corresponding to individual entities@comma{}
provide their labels. For a cuboidal domain@comma{} they are
@code{[x-z][0@comma{}1]} for the
domain faces@comma{} @code{[x-z][0@comma{}1][x-z][0@comma{}1]} for the
edges@comma{} and
@code{[x-z][0@comma{}1][x-z][0@comma{}1][x-z][0@comma{}1]} for the
vertices.
For a cylindrical domain@comma{} they are @code{z[0@comma{}1]} for the
@math{z} faces@comma{} and @code{f[1@comma{}2@comma{}...]} for the faces
on the circular part of the domain.
For other domains@comma{}
they are @code{f[1@comma{}2@comma{}...]} for the faces.
For cylindrical and other types of domains@comma{} the edge and
vertex labels are obtained from the face labels as for cuboidal domains.
For a 2D mesh (generated from a 2D tessellation)@comma{} the labels are
@code{[x-y][0,1]} for the edges and @code{[x-y][0,1][x-y][0,1]} for the
vertices.
Append @samp{body} to a label to get only the body (interior) nodes of
the set. Combine labels with @samp{@SEPNODEP}.
,
see above, faces in 3D and edges in 2D}

@opt{-faset, char_string,
Specify the element surface meshes (edge meshes in 2D) to output. Use
@samp{faces} for all domain faces.  To get the meshes of individual
faces@comma{} provide their labels (see option @option{-nset}).  For
internal mesh faces (edges in 2D) as created by @samp{-interface
discontinuous}@comma{} provide @samp{internal}.
Combine
them @w{with @samp{@SEPNODEP}}.  Provide @code{none} for none.
,
see above, all}

@optsec{-elset, char_string,
Specify the element sets to output.  The argument can be:
@code{default} for the default element sets (those corresponding to the
input tessellation cells)@comma{} or an expression of the form
@samp{@var{elset_label}@SEPDEP@var{elset_definition}}@comma{}
where @code{@var{elset_label}} is a custom elset label and
@code{@var{elset_definition}} is an expression defining the elements
belonging to the elset@comma{} defined from the
variables provided in @ref{Mesh Keys}.
Combine arguments with @samp{@SEPNODEP}.
,
see above, default}

@opt{-performat, char_string,
Specify the format of the @file{.per} output file. The available formats are:
the native @code{msh}@comma{} the plain @code{plain} and the Z-set @code{geof}.
,
see above, msh}

@subsection Post-Processing Options

The following options provide general statistics on the
(highest-dimension) mesh (@samp{mesh}),
0D mesh (@samp{mesh0d}),
1D mesh (@samp{mesh1d}),
2D mesh (@samp{mesh2d}),
3D mesh (@samp{mesh3d}) and
cohesive-element mesh (@samp{meshco}).

@post{-statmesh, char_string,
Provide statistics on the highest-dimension mesh.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stmesh}

@post{-statmesh0d, char_string,
Provide statistics on the 0D mesh.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stmesh0d}

@post{-statmesh1d, char_string,
Provide statistics on the 1D mesh.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stmesh1d}

@post{-statmesh2d, char_string,
Provide statistics on the 2D mesh.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stmesh2d}

@post{-statmesh3d, char_string,
Provide statistics on the 3D mesh.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stmesh3d}

@post{-statmeshco, char_string,
Provide statistics on the cohesive-element mesh.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stmeshco}

The following options provide statistics on the nodes (@samp{nodes}),
(highest-dimension) elements (@samp{elt}) and element sets (@samp{elset}),
0D elements (@samp{elt0d}) and element sets (@samp{elset0d}),
1D elements (@samp{elt1d}) and element sets (@samp{elset1d}),
2D elements (@samp{elt2d}) and element sets (@samp{elset2d}),
3D elements (@samp{elt3d}) and element sets (@samp{elset3d}), and
cohesive elements (@samp{eltco}) and element sets (@samp{elsetco}).

@post{-statnode, char_string,
Provide statistics on the nodes.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stnode}

@post{-statelt, char_string,
Provide statistics on the highest-dimension elements.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelt}

@post{-statelt0d, char_string,
Provide statistics on the 0D elements.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelt0d}

@post{-statelt1d, char_string,
Provide statistics on the 1D elements.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelt1d}

@post{-statelt2d, char_string,
Provide statistics on the 2D elements.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelt2d}

@post{-statelt3d, char_string,
Provide statistics on the 3D elements.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelt3d}

@post{-statelset, char_string,
Provide statistics on the highest-dimension element sets.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelset}

@post{-statelset0d, char_string,
Provide statistics on the 0D element sets.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelset0d}

@post{-statelset1d, char_string,
Provide statistics on the 1D element sets.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelset1d}

@post{-statelset2d, char_string,
Provide statistics on the 2D element sets.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelset2d}

@post{-statelset3d, char_string,
Provide statistics on the 3D element sets.  Provide as argument
the keys as described in @ref{Mesh Keys}@comma{} combined with
@samp{@SEPNODEP}.
,
any, none,
.stelset3d}

@post{-statpoint, char_string,
Provide statistics on points.  The points must be loaded with option
@option{-loadpoint}. Provide as argument
the keys as described in @ref{Point Keys}@comma{} combined @w{with
@samp{@SEPNODEP}}.
,
any, none,
.stpoint}

@subsection Advanced Options

These advanced options set running conditions for the meshing libraries
(2D and 3D meshing),

@optsec{-mesh3dclreps, real,
Specify the relative tolerance on the average element characteristic length
of each polyhedron (compared to @code{cl}).
The value can also be defined on a per-cell basis@comma{}
using any mathematical expression based on the
variables defined in @ref{Tessellation Keys}
or by loading values from an external file@comma{} using
@samp{file(@var{file_name})}@comma{} where @code{@var{file_name}}
is the name of the file containing the values.
As Neper proceeds iteratively to adjust the average element characteristic
length@comma{} this is a highly CPU-intensive capability@comma{}
and low values will increase computation time significantly.
,
any, 0.02}

@optsec{-mesh2dmaxtime, real,
Specify the maximum processing time allowed to the meshing library for meshing a tessellation face
(in seconds).
,
any, 1000}

@optsec{-mesh2drmaxtime, real,
Specify a factor used to determine the maximum processing time allowed
to the meshing library for meshing a tessellation face.  This option is
similar to @option{-mesh2dmaxtime}@comma{} but the actual maximum time
is the product of the maximum processing time of the previous meshings
by the value provided in argument.
,
any, 100}

@optsec{-mesh2diter, integer,
Specify the maximum number of 2D meshing attempts for a particular face
(in the rare case of failure).
,
any, 3}

@optsec{-mesh3dmaxtime, real,
Specify the maximum processing time allowed to the meshing library for
meshing a tessellation polyhedron (in seconds).
,
any, 1000}

@optsec{-mesh3drmaxtime, real,
Specify a factor used to determine the maximum processing time allowed
to the meshing library for meshing a tessellation polyhedron.  This option is
similar to @option{-mesh3dmaxtime}@comma{} but the actual maximum time
is the product of the maximum processing time of the previous meshings
by the value provided in argument.
,
any, 100}

@optsec{-mesh3diter, integer,
Specify the maximum number of 3D meshing attempts for a particular
polyhedron (in the rare case of failure).
,
any, 3}

@need 1000
@section Output Files

@subsection Mesh

The mesh can be written in the following formats,

@itemize
@item native format: file @file{.msh}. @xref{Mesh File (@file{.msh})} for the file syntax.

@item native format / orientations (optional FEPX file): file @file{.ori}.  It contains the @samp{$ElsetOrientations} and @samp{$ElementOrientations} sections of the msh file.

@item native format / groups (optional FEPX file): file @file{.phase}.  It contains the @samp{$Groups} section of the msh file.

@item native format / periodicity: file @file{.per}.

@item native format / boundary conditions (optional FEPX file): file @file{.bcs}.

@item Gmsh format version 4: file @file{.msh4}

@item VTK format: file @file{.vtk}

@item Abaqus format: file @file{.inp}

@item Z-set format: file @file{.geof}

@end itemize

@subsection Interfaces

@itemize
@item File @file{.intl}. For each 2D interface, the file provide (one 2D
    interface per line): the labels of the two element sets of the interface.
@end itemize

@subsection Statistics

Statistics files are provided for nodes, elements, element sets and
points.
They are formatted with one entity per line.  Each line
contains the
data specified to the corresponding @option{-stat} option and described in
@ref{Mesh Keys}.

@itemize
  @item Node statistics file, @file{.stnode}.
  @item (Highest-dimension) mesh statistics file, @file{.stmesh}.
  @item (Highest-dimension) element statistics file, @file{.stelt}.
  @item (Highest-dimension) element set statistics file, @file{.stelset}.
  @item 0D mesh statistics file, @file{.stmesh0d}.
  @item 1D mesh statistics file, @file{.stmesh1d}.
  @item 2D mesh statistics file, @file{.stmesh2d}.
  @item 3D mesh statistics file, @file{.stmesh3d}.
  @item Cohesive-element mesh statistics file, @file{.stmeshco}.
  @item 0D element statistics file, @file{.stelt0d}.
  @item 1D element statistics file, @file{.stelt1d}.
  @item 2D element statistics file, @file{.stelt2d}.
  @item 3D element statistics file, @file{.stelt3d}.
  @item 0D element set statistics file, @file{.stelset0d}.
  @item 1D element set statistics file, @file{.stelset1d}.
  @item 2D element set statistics file, @file{.stelset2d}.
  @item 3D element set statistics file, @file{.stelset3d}.
  @item Point statistics file, @file{.stpoint}.
@end itemize

@section Examples

Below are some examples of use of neper -M.

@enumerate
@c Example_beg
@item    Mesh tessellation @file{n100-id1.tess}.
@com{neper -M n100-id1.tess}
@item    Mesh 2D raster tessellation @file{n100-id1.tesr}.
@com{neper -M n100-id1.tesr}
@item    Mesh tessellation @file{n100-id1.tess} with a mesh size of rcl = 0.5 and in 2nd-order elements.
@com{neper -M n100-id1.tess -rcl 0.5 -order 2}
@item    Mesh tessellation @file{n100-id1.tess} with small elements for the
interior cells and bigger elements for the boundary cells.
@com{neper -M n100-id1.tess -rcl "body!=0?0.2:0.5"}
@item    Remesh mesh @file{n150_def.msh} (comprising poor-quality
elements) into a clean, new mesh. Transport the scalar data of file
@file{n150_def.data} from the deformed mesh to the new mesh.
@com{neper -M n150.tess,n150_def.msh -transport elt@SEPDEP{}real1@SEPDEP{}n150_def.data}
@comx{-rcl 0.5 -o n150_new}
@item    Mesh tessellation @file{n100-id1.tess} and divide the mesh into 8 partitions.
@com{neper -M n100-id1.tess -part 8}
@item    Mesh tessellation @file{n100-id1.tess} into regular hexahedral
elements (non-conformal mesh).
@com{neper -M n100-id1.tess -elt hex}
@item    Mesh tessellation @file{n100-id1.tess} and get, for each
element, its radius ratio and its volume.
@com{neper -M n100-id1.tess -statelt rr,vol}
@item    Mesh tessellation @file{n100-id1.tess} and get the number of nodes and elements of the mesh.
@com{neper -M n100-id1.tess -statmesh nodenb,eltnb}
@c Example_end
@end enumerate
