@c This file is part of the Neper software package.
@c Copyright (C) 2003-2021 Romain Quey
@c See the COPYING file in the top-level directory.

@node Visualization Module (-V)
@chapter Visualization Module (-V)

@MV{} is the module for visualizing tessellations, meshes and simulation results as publication-quality PNG images@footnote{The POV-Ray ray-tracing library is used for generating the images.} or as VTK files, for interactive visualization. Results can be defined from internal data, data loaded from external files or a simulation directory as generated by @mS{}.  For the PNG images, it is possible to set different attributes of the tessellations and meshes such as the node coordinates, or the colors and transparencies of the different entities. Point data can also be represented, using symbols of specified sizes and colors. Slice views can also be generated.

Contrary to other modules, @mV{} processes the command arguments one after the other. Typically, using @mV{} consists of loading a tessellation or a mesh, then data fields to render them --- which is done all at once by loading a simulation directory as generated by @mS{}.  The data can apply to the tessellation entities: polyhedra, faces, edges and vertices, to the mesh entities: @w{3D}, @w{2D}, @w{1D} and @w{0D elements} and nodes, and to points (options beginning with @option{-data}). In the case of a PNG output file, many aspects of the scene can be set into fine detail: the entities that are to be visible, for example particular tessellation cells, element sets or elements, can be specified (options beginning with @option{-show}); the way they are plotted (camera position and angle, projection type, image size, etc.) can also be set up (options beginning with @option{-camera} or @option{-image}), and the coordinate system can be added.

@sp 1
Here is what a typical run of @mV{} looks like:

@sp 1
@example
$ neper -V n10-id1.tess,n10-id1.msh -dataelsetcol id -print img

========================    N   e   p   e   r    =======================
Info   : A software package for polycrystal generation and meshing.
Info   : Version 4.0.0
Info   : Built with: gsl|muparser|opengjk|openmp|nlopt|libscotch (full)
Info   : Running on 8 threads.
Info   : <https://neper.info>
Info   : Copyright (C) 2003-2021, and GNU GPL'd, by Romain Quey.
Info   : No initialization file found (`/home/rquey/.neperrc').
Info   : ---------------------------------------------------------------
Info   : MODULE  -V loaded with arguments:
Info   : [ini file] (none)
Info   : [com line] n10-id1.tess,n10-id1.msh -dataelsetcol id -print img
Info   : ---------------------------------------------------------------
Info   : Loading tessellation...
Info   :     [i] Parsing file `n10-id1.tess'...
Info   :     [i] Parsed file `n10-id1.tess'.
Info   : Loading mesh...
Info   :     [i] Parsing file `n10-id1.msh'...
Info   :     [i] Parsed file `n10-id1.msh'.
Info   : Reconstructing mesh...
Info   : Reading data (elset3d, col)...
Info   : Printing image...
Info   :     [o] Writing file `img.pov'...
Info   :   - Printing mesh...
Info   :     > Reducing data...
Info   :       . 3D...
Info   :       . 2D...
Info   :       . Number of 3D elt faces reduced by  90% (to 418).
Info   :       . Number of 3D elt edges reduced by  50% (to 627).
Info   :       . Number of 0D elts      reduced by 100% (to 0).
Info   :     [o] Wrote file `img.pov'.
Info   :   - Generating png file (1200x900 pixels)...
Info   :     [o] Writing file `img.png'...
Info   :     [o] Wrote file `img.png'.
Info   : Printing scale...
Info   : Elapsed time: 1.546 secs.
========================================================================
@end example

@section Arguments

@subsection Prerequisites

@req{-povray, path_name,
Specify the path of the POV-Ray binary (for generating PNG images).,
any, povray}

@subsection Input Data

@inp{, file_name,
Specify the names of the input file(s) or directory. The files can be a tessellation file
(@file{.tess})@comma{} a raster tessellation file (@file{.tesr})@comma{}
a mesh file (@file{.msh}) or a point file (@pxref{Position File}).
The directory must be a simulation directory as generated by @mS{}.
To load several of them@comma{} combine them @w{with @samp{@SEPNODEP}}.
,
any, none}

When a simulation directory is loaded as input, it is possible to set the simulation step to consider using the following option,

@opt{-simstep, integer,
Specify the simulation step (@code{0} for the initial state).,
any, 0}

@c The input data can be either individual files for the tessellation, mesh, etc.@ or a simulation directory as generated by @mS{}.
The data internal to the simulation directory have the same status as internal data (such as, for instance, the nominal element orientations stored in the mesh file) and can therefore be loaded (with options @option{-data*}) more simply than with standard external files.  For example, coloring elements from orientations can be done using, instead of the standard @samp{-dataeltcol "ori:file(@var{simulation_directory}/res/ori/ori.step2)"} or, when @samp{-simstep 2} was invoked before, @samp{-dataeltcol ori} (since the variable is self-defined and the simulation step is known, Neper will figure out which file to use).

@subsection Space Options

The following option enables the definition of the space which the input data (tessellation, mesh, point, etc.) are defined in.  The space is most generally real (physical) space, but can be defined as Rodrigues orientation space, which makes it possible to account for its distortion.@footnote{It currently only affects the arguments of @option{-datapointrad}.}

@optsec{-space, char_string,
Specify the space which the input data are defined in.  Use @samp{real} for real space
or @samp{rodrigues} for Rodrigues orientation space.
,
see above, real}

@subsection Tessellation Data Loading and Rendering

The following options enable the definition of the properties (color and size) of
the tessellation cells or entities (polyhedra, faces, edges and vertices).  This
can be done either directly, by specifying the property values (e.g.@
the RGB channel values for color) or indirectly, e.g.@ using scalar
values that are converted in color using a given @emph{@w{color
scheme}}.  In this case, a scale image is generated in addition to the
tessellation image.  The scale properties can be set up (minimum,
maximum and tick values).

The following options apply to the cells of a tessellation or a raster
tessellation, independently of its dimension,

@opt{-datacellcol, char_string,
Set the colors of the tessellation cells@comma{} which can be done in two
main different ways.@*
@emph{(i)} Colors can be specified directly as follows:@*
@mybullet{} @samp{@var{value}}@comma{} where @samp{@var{value}} can be a color that applies to all cells@comma{} or @samp{file(@var{file_name})} for a file containing the individual colors (@pxref{Colors and Color Maps}).@*
@emph{(ii)} Colors can be set from data using an argument of the general form
@samp{@var{data_type}:@var{data_value}}@comma{} which can be shortened@footnote{This ensures backward compatibility with versions 3.x.} to @samp{@var{data_value}} in the frequent case where the data type can be unambiguously determined from the data value:@*
@mybullet{} @samp{int:@var{data_value}} for integer values represented using a color palette@comma{} where @samp{@var{data_value}} can be an integer-value expression such as @samp{id} or @samp{mode} and (@pxref{Tessellation Keys})@comma{} or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{real:@var{data_value}} for real values represented using a smooth color scale@comma{} where @samp{@var{data_value}} can be a real-value expression such as @samp{x} or @samp{vol} (@pxref{Tessellation Keys})@comma{} or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{ori:@var{data_value}} for the crystal orientations (when applicable)@comma{} where @samp{@var{data_value}} can be an orientation (@pxref{Rotations and Orientations})@comma{} @samp{internal} to use the internal orientations@comma{} or @samp{file(@var{file_name},[des=@var{descriptor}])} for a file containing the individual values (@pxref{Rotations and Orientations}). Because @samp{ori} is self-defined@comma{} @samp{@var{data_value}} can also be omitted in the case where internal orientations are to be used. @*
The color schemes used to determine the colors from the data can be fine-tuned using options @option{-data*colscheme}.
,
any, id}

@opt{-datacellcolscheme, char_string,
Set the color scheme used to get colors from the data of
the tessellation cells loaded with option @option{-datacellcol}.
The type of color scheme depends on the type of data.@*
@bullet{} For integer values@comma{} the color scheme is @samp{palette} (@pxref{Colors and Color Maps}).@*
@bullet{} For real values@comma{} several color schemes are available (@pxref{Colors and Color Maps}) and the default is @samp{viridis}.@*
@bullet{} For crystal orientations (cubic symmetry is assumed)@comma{}
the color scheme can be:
@samp{ipf(@var{dir})} for IPF coloring using direction @samp{@var{dir}}@comma{} where @samp{@var{dir}} should be one of @samp{x}@comma{} @samp{y} or @samp{z} (default @samp{z})@comma{}
@samp{rodrigues} for Rodrigues vector coloring (default is inside the fundamental
region@comma{} can be bounded using @samp{rodrigues(@var{max})}@comma{} where @var{max}
is the half-length along a direction)@comma{}
@samp{axis} for rotation axis coloring@comma{}
@samp{angle} for rotation angle coloring (can be bounded using
@samp{angle(@var{max})}@comma{} where @var{max} is the maximum angle (in radian)) and
@samp{axis-angle} for rotation axis / angle coloring (can be bounded using
@samp{axis-angle(@var{max})}@comma{} where @var{max} is the maximum angle (in radian)).
,
see above,
"palette" for integer values@comma{} "viridis" for real values and "rodrigues"
  for crystal orientations
}

@opt{-datacelltrs, real,
Set the transparency of the tessellation cells.  Provide as argument a
value that applies to all cells or @samp{file(@var{file_name})} to load
values from a file.
,
0 to 1, 0}

@opt{-datacellscale, char_string,
Set the scale relative to the @samp{-datacellcol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-datacellscaletitle, char_string,
Set the title of the scale relative to the @samp{-datacellcol real} data.
,
any, none
}

For tessellations, it is also possible to set data on a
per-entity basis,

@opt{-datapolycol, char_string,
Set the colors of the tessellation polys.  See option @option{-datacellcol}
for the argument format.
,
any, white}

@opt{-datapolycolscheme, char_string,
Set the color scheme used to get colors from the data of
the tessellation faces loaded with option @option{-datapolycol}.
See option @option{-datacellcolscheme} for the argument format.
,
see option @option{-datacellcolscheme},
see option @option{-datacellcolscheme}
}

@opt{-datapolytrs, real,
Set the transparency of the tessellation polyhedra.  Provide as argument a
value that applies to all polyhedra or @samp{file(@var{file_name})} to load
values from a file.
,
0 to 1, 0}

@opt{-datapolyscale, char_string,
Set the scale relative to the @samp{-datapolycol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-datapolyscaletitle, char_string,
Set the title of the scale relative to the @samp{-datapolycol real} data.
,
any, none
}

@opt{-datafacecol, char_string,
Set the colors of the tessellation faces.  See option @option{-datacellcol}
for the argument format.
,
any, white}

@opt{-datafacecolscheme, char_string,
Set the color scheme used to get colors from the data of
the tessellation faces loaded with option @option{-datafacecol}.
See option @option{-datacellcolscheme} for the argument format.
,
see option @option{-datacellcolscheme},
see option @option{-datacellcolscheme}
}

@opt{-datafacetrs, real,
Set the transparency of the tessellation faces.  Provide as argument a
value that applies to all faces or @samp{file(@var{file_name})} to load
values from a file.
,
0 to 1, 0}

@opt{-datafacescale, char_string,
Set the scale relative to the @samp{-datafacecol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-datafacescaletitle, char_string,
Set the title of the scale relative to the @samp{-datafacecol real} data.
,
any, none
}

@opt{-dataedgerad, char_string,
Set the radii of the tessellation edges.
The argument can be one of the following: a real value
that will be used for all entities or @samp{file(@var{file_name})} to load
values from a file.
,
any, tessellation dependent}

@opt{-dataedgecol, char_string,
Set the colors of the tessellation edges.  See option @option{-datacellcol}
for the argument format.
,
any, black}

@opt{-dataedgecolscheme, char_string,
Set the color scheme used to get colors from the data of
the tessellation edges loaded with option @option{-dataedgecol}.
See option @option{-datacellcolscheme} for the argument format.
,
see option @option{-datacellcolscheme},
see option @option{-datacellcolscheme}
}

@opt{-dataedgetrs, real,
Set the transparency of the tessellation edges.  Provide as argument a
value that applies to all edges or @samp{file(@var{file_name})} to load
values from a file.
,
0 to 1, 0}

@opt{-dataedgescale, char_string,
Set the scale relative to the @samp{-dataedgecol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-dataedgescaletitle, char_string,
Set the title of the scale relative to the @samp{-dataedgecol real} data.
,
any, none
}

@opt{-dataverrad, char_string,
Set the radii of the tessellation vertices.
See option @option{-dataedgerad} for the argument format.
,
any, tessellation dependent}

@opt{-datavercol, char_string,
Set the colors of the tessellation vertices.  See option @option{-datacellcol}
for the argument format.
,
any, black}

@opt{-datavercolscheme, char_string,
Set the color scheme used to get colors from the data of
the tessellation vertices loaded with option @option{-datavercol}.
See option @option{-datacellcolscheme} for the argument format.
,
see option @option{-datacellcolscheme},
see option @option{-datacellcolscheme}
}

@opt{-datavertrs, real,
Set the transparency of the tessellation vertices.  Provide as argument a
value that applies to all vertices or @samp{file(@var{file_name})} to load
values from a file.
,
0 to 1, 0}

@opt{-dataverscale, char_string,
Set the scale relative to the @samp{-datavercol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-dataverscaletitle, char_string,
Set the title of the scale relative to the @samp{-datavercol real} data.
,
any, none
}

@opt{-dataseedrad, char_string,
Set the radii of the tessellation seeds.
See option @option{-dataedgerad} for the argument format.
,
any, tessellation dependent}

@opt{-dataseedcol, char_string,
Set the colors of the tessellation seeds.  See option @option{-datacellcol}
for the argument format.
,
any, gray}

@opt{-dataseedcolscheme, char_string,
Set the color scheme used to get colors from the data of
the tessellation seeds loaded with option @option{-dataseedcol}.
See option @option{-datacellcolscheme} for the argument format.
,
see option @option{-datacellcolscheme},
see option @option{-datacellcolscheme}
}

@opt{-dataseedscale, char_string,
Set the scale relative to the @samp{-dataseedcol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-dataseedscaletitle, char_string,
Set the title of the scale relative to the @samp{-dataseedcol real} data.
,
any, none
}

Below are options specific to raster tessellations.
For a raster tessellation, it is also possible to set data on a per-voxel
basis, or for the edges,

@opt{-datavoxcol, char_string,
Set the colors of the voxels@comma{} which can be done in two
main different ways.@*
@emph{(i)} Colors can be specified directly as follows:@*
@mybullet{} @samp{@var{value}}@comma{} where @samp{@var{value}} can be a color that applies to all cells@comma{} or @samp{file(@var{file_name})} for a file containing the individual colors (@pxref{Colors and Color Maps}).@*
@emph{(ii)} Colors can be set from data using an argument of the general form
@samp{@var{data_type}:@var{data_value}}@comma{} which can be shortened@footnote{This ensures backward compatibility with versions 3.x.} to @samp{@var{data_value}} in the frequent case where the data type can be unambiguously determined from the data value:@*
@mybullet{} @samp{int:@var{data_value}} for integer values represented using a color palette@comma{} where @samp{@var{data_value}} can be an integer-value expression such as @samp{id} or @samp{mode} (@pxref{Raster Tessellation Keys})@comma{} or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{real:@var{data_value}} for real values represented using a smooth color scale@comma{} where @samp{@var{data_value}} can be a real-value expression such as @samp{x} or @samp{vol} (@pxref{Raster Tessellation Keys})@comma{} or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{ori:@var{data_value}} for the crystal orientations (when applicable)@comma{} where @samp{@var{data_value}} can be an orientation (@pxref{Rotations and Orientations})@comma{} @samp{internal} to use the internal orientations@comma{} or @samp{file(@var{file_name},[des=@var{descriptor}])} for a file containing the individual values (@pxref{Rotations and Orientations}). Because @samp{ori} is self-defined@comma{} @samp{@var{data_value}} can also be omitted in the case where internal orientations are to be used. @*
@mybullet{} @samp{disori:@var{data_value}} for the crystal disorientations (the rotation with respect to the nominal cell orientation@comma{} when applicable)@comma{} where @samp{@var{data_value}} can be a disorientation (@pxref{Rotations and Orientations})@comma{} @samp{internal} to use the internal disorientations@comma{} or @samp{file(@var{file_name},[des=@var{descriptor}])} for a file containing the individual values (@pxref{Rotations and Orientations}). Because @samp{disori} is self-defined@comma{} @samp{@var{data_value}} can also be omitted in the case where internal orientations are to be used. @*
The color schemes used to determine the colors from the data can be fine-tuned using options @option{-data*colscheme}.
,
any, white}

@opt{-datavoxcolscheme, char_string,
Set the color scheme used to get colors from the data of
the voxels loaded with option @option{-datavoxcol}.
The type of color scheme depends on the type of data.@*
@bullet{} For integer values@comma{} the color scheme is @samp{palette}.@*
@bullet{} For real values@comma{} the color scheme is @samp{blue@comma{}cyan@comma{}yellow@comma{}red} (@pxref{Colors and Color Maps} for alternatives).@*
@bullet{} For crystal orientations (cubic symmetry is assumed) or disorientations (the actual crystal symmetry is assumed)@comma{}
the color scheme can be:
@samp{ipf(@var{dir})} for IPF coloring using direction @samp{@var{dir}}@comma{} where @samp{@var{dir}} should be one of @samp{x}@comma{} @samp{y} or @samp{z} (default @samp{z})@comma{}
@samp{rodrigues} for Rodrigues vector coloring (default is inside the fundamental
region@comma{} can be bounded using @samp{rodrigues(@var{max})}@comma{} where @var{max}
is the maximum extent)@comma{}
@samp{axis} for rotation axis coloring@comma{}
@samp{angle} for rotation angle coloring (can be bounded using
@samp{angle(@var{max})}@comma{} where @var{max} is the maximum angle (in radian)) and
@samp{axis-angle} for rotation axis / angle coloring (can be bounded using
@samp{axis-angle(@var{max})}@comma{} where @var{max} is the maximum angle (in radian)).
,
see above,
"palette" for integer values@comma{} "blue@comma{}cyan@comma{}yellow@comma{}red" for real values and
"rodrigues" for crystal orientations or disorientations
}

@opt{-datavoxscale, char_string,
Set the scale relative to the @samp{-datavoxcol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@opt{-datavoxscaletitle, char_string,
Set the title of the scale relative to the @samp{-datavoxcol real} data.
,
any, none
}

@opt{-datavoxedgerad, real,
Set the radius of the edges of the voxels.
,
any, 0}

@opt{-datavoxedgecol, char_string,
Set the color of the edges of the voxels.
Provide as argument the name of a color that will be used for all
points (@pxref{Colors and Color Maps}).
,
any, black}

It is also possible to assign a color to void voxels (i.e., voxels do not belong to any cell). (The edge radius and edge color of void voxels are the same as those of non-void voxels and are set with @option{-datavoxedgerad} and @option{-datavoxedgecol}.).

@opt{-datavoidvoxcol, char_string,
Set the color of void voxels (@pxref{Colors and Color Maps}).
,
any, gray}

It is also possible to set the radius of the edges of a 2D raster tessellation
(just as for a tessellation),

@opt{-dataedgerad, char_string,
Set the radii of the raster tessellation edges.
The argument can be any expression based on the keys listed in
@ref{Raster Tessellation Keys}.
,
any, tessellation dependent}

@subsection Mesh Data Loading and Rendering

The following options enable the definition of the properties (color, size,
etc.)@ of the mesh entities (3D, 2D, 1D and 0D elements, and nodes).  This
can be done either directly, by specifying the color(s),
or indirectly, e.g.@ from scalar
values that are rendered in color using a given @emph{@w{color
scheme}}.  The data can be internal data, data from the simulation directory (if loaded as input),
or data loaded from an external file.  A scale image is generated in addition to the
mesh image.  The scale properties can be set up (start and end values,
tick values).

The options are listed below for @w{3D elements} (@samp{elt3d}) and element
sets (@samp{elset3d}), @w{2D elements}
(@samp{elt2d}) and element sets (@samp{elset2d}), @w{1D elements}
(@samp{elt1d}) and element sets (@samp{elset1d}), @w{0D elements}
(@samp{elt0d}) and element sets (@samp{elset0d}),
and nodes (@samp{nodes}). Also note that the @samp{@dfn{elt}} and
@samp{@dfn{elset}} labels can be used in place of @samp{elt@var{n}d} and
@samp{elset@var{n}d}, where @code{@var{n}} is the highest mesh dimension.  This
enables the use of the same command whatever the highest mesh dimension is.

@c 3D
The following options enable the loading of data relative to the 3D mesh
elements. Note that the options can be applied to element sets
by changing @samp{elt} to @samp{elset}.

@kindex -dataelset3dcol
@opt{-dataelt3dcol, char_string,
Set the colors of the 3D elements@comma{} which can be done in two
main different ways.@*
@emph{(i)} Colors can be specified directly as follows:@*
@mybullet{} @samp{@var{value}}@comma{} where @samp{@var{value}} can be a color that applies to all elements@comma{} or @samp{file(@var{file_name})} for a file containing the individual colors (@pxref{Colors and Color Maps}).@*
@mybullet{} @samp{from_nodes} for colors interpolated from the node colors (defined with @option{-datanodecol}).@*
@emph{(ii)} Colors can be set from data using an argument of the general form
@samp{@var{data_type}:@var{data_value}}@comma{} which can be shortened@footnote{This ensures backward compatibility with versions 3.x.} to @samp{@var{data_value}} in the frequent case where the data type can be unambiguously determined from the data value:@*
@mybullet{} @samp{int:@var{data_value}} for integer values represented using a color palette@comma{} where @samp{@var{data_value}} can be an integer-value expression such as @samp{id} or @samp{mode} (@pxref{Mesh Keys})@comma{} a simulation result (@pxref{Simulation Results})@comma{} or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{real:@var{data_value}} for real values represented using a smooth color scale@comma{} where @samp{@var{data_value}} can be a real-value expression such as @samp{x} or @samp{vol} (@pxref{Mesh Keys})@comma{} a simulation result (@pxref{Simulation Results})@comma{} or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{vector:@var{data_value}} for vectorial values (only for VTK output)@comma{} where @samp{@var{data_value}} can be a simulation result (@pxref{Simulation Results}) or @samp{file(@var{file_name})} for a file containing the individual values.@*
@mybullet{} @samp{tensor:@var{data_value}} for tensorial values (only for VTK output)@comma{} where @samp{@var{data_value}} can be a simulation result (@pxref{Simulation Results}) or @samp{file(@var{file_name})} for a file containing the individual values.  The file can contain either all 9 components or only 6 components@comma{} in which case Voigt notation is assumed.@*
@mybullet{} @samp{ori:@var{data_value}} for the crystal orientations (when applicable)@comma{} where @samp{@var{data_value}} can be an orientation (@pxref{Rotations and Orientations})@comma{} @samp{internal} to use the internal orientations@comma{} or @samp{file(@var{file_name},[des=@var{descriptor}])} for a file containing the individual values (@pxref{Rotations and Orientations}). Because @samp{ori} is self-defined@comma{} @samp{@var{data_value}} can also be omitted in the case where internal orientations are to be used. @*
The color schemes used to determine the colors from the data can be fine-tuned using options @option{-dataelt3dcolscheme}.
,
any, -dataelsetcol id}

@kindex -dataelset3dcolscheme
@opt{-dataelt3dcolscheme, char_string,
Set the color scheme used to get colors from the data of
the elements loaded with option @option{-dataelt3dcol}.
The type of color scheme depends on the type of data.@*
@bullet{} For integer values@comma{} the color scheme is @samp{palette}.@*
@bullet{} For real values@comma{} the color scheme is @samp{blue@comma{}cyan@comma{}yellow@comma{}red} (@pxref{Colors and Color Maps} for alternatives).@*
@bullet{} For crystal orientations (cubic symmetry is assumed)@comma{}
the color scheme can be:
@samp{ipf(@var{dir})} for IPF coloring using direction @samp{@var{dir}}@comma{} where @samp{@var{dir}} should be one of @samp{x}@comma{} @samp{y} or @samp{z} (default @samp{z})@comma{}
@samp{rodrigues} for Rodrigues vector coloring (default is inside the fundamental
region@comma{} can be bounded using @samp{rodrigues(@var{max})}@comma{} where @var{max}
is the maximum extent)@comma{}
@samp{axis} for rotation axis coloring@comma{}
@samp{angle} for rotation angle coloring (can be bounded using
@samp{angle(@var{max})}@comma{} where @var{max} is the maximum angle (in radian)) and
@samp{axis-angle} for rotation axis / angle coloring (can be bounded using
@samp{axis-angle(@var{max})}@comma{} where @var{max} is the maximum angle (in radian)).
,
see above,
"palette" for integer values@comma{} "blue@comma{}cyan@comma{}yellow@comma{}red" for real values and
"rodrigues" for crystal orientations
}

@kindex -dataelset3dscale
@opt{-dataelt3dscale, char_string,
Set the scale relative to the @samp{-dataelt3dcol real} data.  Provide as
argument the start and end values@comma{} combined with
@samp{@SEPDEP{}}.  To specify the intermediate values@comma{} provide as
argument the start value@comma{} the intermediate values and the
end value@comma{} combined with @samp{@SEPDEP{}}.  The labels of the
scale follow the format used for the start value.
,
any, data minimum:data maximum
}

@kindex -dataelset3dscaletitle
@opt{-dataelt3dscaletitle, char_string,
Set the title of the scale relative to the @samp{-dataelt3dcol real} data.
,
any, none
}

@kindex -dataelset3dedgerad
@opt{-dataelt3dedgerad, real,
Set the radius of the edges of the 3D elements.
,
any, mesh dependent}

@kindex -dataelset3dedgecol
@opt{-dataelt3dedgecol, char_string,
Set the color of the edges of the 3D elements.
Provide as argument the name of a color that will be used for all
elements (@pxref{Colors and Color Maps}).
,
any, black}

@c 2D

@sp 1
The following options enable the loading of data relative to the 2D elements.
Note that the options can be applied to element sets
by changing @samp{elt} to @samp{elset}.

@kindex -dataelset2dcol
@opt{-dataelt2dcol, char_string,
Set the colors of the 2D elements.
See option @option{-dataelt3dcol} for the argument format.
,
any, -dataelsetcol id if 2D mesh and white if 3D mesh}

@kindex -dataelset2dcolscheme
@opt{-dataelt2dcolscheme, char_string,
Set the color scheme used to get colors from the data of
the 2D elements loaded with option @option{-dataelt2dcol}.
See option @option{-dataelt3dcolscheme} for the argument format.
,
see option @option{-dataelt3dcolscheme},
see option @option{-dataelt3dcolscheme}
}

@kindex -dataelset2dscale
@opt{-dataelt2dscale, char_string,
Set the scale relative to the @samp{-dataelt2dcol real} data.  See option @option{-dataelt3dscale} for the argument format.
,
any, data minimum:data maximum
}

@kindex -dataelset2dscaletitle
@opt{-dataelt2dscaletitle, char_string,
Set the title of the scale relative to the @samp{-dataelt2dcol real} data.
,
any, none
}

@kindex -dataelset2dedgerad
@opt{-dataelt2dedgerad, real,
Set the radius of the edges of the 2D elements.
,
any, mesh dependent}

@kindex -dataelset2dedgecol
@opt{-dataelt2dedgecol, char_string,
Set the colors of the edges of the 3D elements.
See option @option{-dataelt3dedgecol} for the argument format.
,
any, black}

@sp 1
The following options enable the loading of data relative to the 1D elements.
Note that the options can be applied to element sets
by changing @samp{elt} to @samp{elset}.

@kindex -dataelset1dcol
@opt{-dataelt1dcol, char_string,
Set the colors of the 1D elements.
See option @option{-dataelt3dcol} for the argument format.
,
any, black}

@kindex -dataelset1dcolscheme
@opt{-dataelt1dcolscheme, char_string,
Set the color scheme used to get colors from the data of
the 1D elements loaded with option
@option{-dataelt1dcol}. See option
@option{-dataelt3dcolscheme} for the argument format.
,
see option @option{-dataelt3dcolscheme},
see option @option{-dataelt3dcolscheme}
}

@kindex -dataelset1dscale
@opt{-dataelt1dscale, char_string,
Set the scale relative to the @samp{-dataelt1dcol real} data.  See option @option{-dataelt3dscale} for the argument format.
,
any, data minimum:data maximum
}

@kindex -dataelset1dscaletitle
@opt{-dataelt1dscaletitle, char_string,
Set the title of the scale relative to the @samp{-dataelt1dcol real} data.
,
any, none
}

@kindex -dataelset1drad
@opt{-dataelt1drad, char_string,
Set the radius of the 1D elements.  Provide as argument a
value that applies to all elements or @samp{file(@var{file_name})} to load
values from a file.
,
any, mesh dependent}

@sp 1
The following options enable the loading of data relative to the 0D mesh
elements.
Note that the options can be applied to element sets
by changing @samp{elt} to @samp{elset}.

@kindex -dataelset0dcol
@opt{-dataelt0dcol, char_string,
Set the colors of the 0D elements.
See option @option{-dataelt3dcol} for the argument format.
,
any, black}

@kindex -dataelset0dcolscheme
@opt{-dataelt0dcolscheme, char_string,
Set the color scheme used to get colors from the data of
the 0D elements loaded with option
@option{-dataelt0dcol}. See option
@option{-dataelt3dcolscheme} for the argument format.
,
see option @option{-dataelt3dcolscheme},
see option @option{-dataelt3dcolscheme}
}

@kindex -dataelset0dscale
@opt{-dataelt0dscale, char_string,
Set the scale relative to the @samp{-dataelt0dcol real} data.  See option @option{-dataelt3dscale} for the argument format.
,
any, data minimum:data maximum
}

@kindex -dataelset0dscaletitle
@opt{-dataelt0dscaletitle, char_string,
Set the title of the scale relative to the @samp{-dataelt0dcol real} data.
,
any, none
}

@kindex -dataelset0drad
@opt{-dataelt0drad, char_string,
Set the radius of the 1D elements.  Provide as argument a
value that applies to all elements or @samp{file(@var{file_name})} to load
values from a file.
,
any, mesh dependent}

@sp 1
The following options enable the loading of data relative to the nodes.

@opt{-datanodecoo, char_string,
Set the coordinates of the nodes@comma{} which can be done in two
main different ways.@*
@emph{(i)} Coordinates can be specified directly as follows:@*
@mybullet{} @samp{@var{value}}@comma{} where @samp{@var{value}} can be @samp{file(@var{file_name})} for a file containing the data.@*
@emph{(ii)} Coordinates can be set from data using an argument of the general form
@samp{@var{data_type}:@var{data_value}}:@*
@mybullet{} @samp{disp:file(@var{file_name})} for a file containing the displacement data.@*
@mybullet{} @samp{coo} to load coordinates from the simulation directory and step specified in input.
,
any, none}

@opt{-datanodecoofact, real,
Set the value of the scaling factor to apply to the displacements of
the nodes.
,
any, 1}

@opt{-datanoderad, file_name,
Set the radius of the nodes.  Provide as argument a
value that applies to all nodes or @samp{file(@var{file_name})} to load
values from a file.
,
any, mesh dependent}

@opt{-datanodecol, file_name,
Set the colors of the nodes.
See option @option{-dataelt3dcol} for the argument format.
,
any, black}

@opt{-datanodecolscheme, char_string,
Set the color scheme used to get colors from the data of
the nodes loaded with option
@option{-datanodecol}. See option
@option{-dataelt3dcolscheme} for the argument format.
,
see option @option{-dataelt3dcolscheme},
see option @option{-dataelt3dcolscheme}
}

@opt{-datanodescale, char_string,
Set the scale relative to the @samp{-datanodecol real} data.  See option
@option{-dataelt3dscale} for the argument format.
,
any, data minimum:data maximum
}

@opt{-datanodescaletitle, char_string,
Set the title of the scale relative to the @samp{-datanodecol real} data.
,
any, none
}

@subsection Point Data Loading and Rendering

The following options enable the definition of the properties (color, shape, size,
etc.)@ of points loaded as input.  This can be done either directly, by specifying the
property values (e.g.@ the RGB channel values for color) or indirectly,
e.g.@ using scalar values that are rendered in color using a given
@emph{@w{color scheme}}.  In this case, a scale image is generated in
addition to the image.  The scale properties can be set up (start and
end values, tick values).

@opt{-datapointcoo, char_string,
Set the coordinates of the points.  The argument can be of the form @samp{@var{type}@SEPDEP{}file(@var{file_name})}@comma{} where @samp{@var{type}} can be @samp{coo} (for coordinates) or @samp{disp} (for displacements)@comma{} and @samp{@var{file_name}} is the name of the file containing the data.
,
any, none}

@opt{-datapointcoofact, real,
Set the value of the scaling factor to apply to the displacements of
the points.
,
any, 1}

@opt{-datapointrad, char_string,
Set the radius (and shape) of the points@comma{} which can be done using one
of the following arguments:@*
@mybullet{} @samp{value}@comma{} where @samp{@var{value}} can be a radius that
applies to all cells@comma{} or @samp{file(@var{file_name})} for a file
containing the individual radii.@*
@mybullet{} @samp{cube:file(@var{file_name})} for cubes of properties defined in @samp{@var{file_name}}. The file must contain@comma{} for each point@comma{} the radius (half of the
edge length) and the coordinates of the three axes (which also is the
rotation matrix that brings the reference axes into coincidence with the cube
axes).@*
@mybullet{} @samp{cylinder:file(@var{file_name})} for cylinders of properties
defined in @samp{@var{file_name}}.  The file must contain@comma{} for each
point@comma{} the radius@comma{} the length@comma{} and the coordinates of
the axis.@*
@mybullet{} @samp{arr:file(@var{file_name})} for arrows of properties defined
in @samp{@var{file_name}}.  The file must contain@comma{} for each
point@comma{} the radius@comma{} the length@comma{} and the coordinates of
the axis.@*
@mybullet{} @samp{disc:file(@var{file_name})} for discs of properties defined
in @samp{@var{file_name}}.  The file must contain@comma{} for each
point@comma{} the radius@comma{} and the coordinates of the axis.@*
@mybullet{} @samp{ell:file(@var{file_name})} for ellispoids of properties
defined in @samp{@var{file_name}}.  The file must contain@comma{} for each
point@comma{} the three radii the coordinates of the three axes.@*
@mybullet{} @samp{tor:file(@var{file_name})} for torus of properties defined in
@samp{@var{file_name}}.  The file must contain@comma{} for each point@comma{}
the major radius (centre to centre line)@comma{} the minor radius@comma{} and
the coordinates of the normal axis.
,
any, point set dependent}

@opt{-datapointcol, char_string,
Set the colors of the points.
See option @option{-dataelt3dcol} for the argument format.
,
any, gray}

@opt{-datapointcolscheme, char_string,
Set the color scheme used to get colors from the data of
the points loaded with option
@option{-datapointcol}. See option
@option{-dataelt3dcolscheme} for the argument format.
,
see option @option{-dataelt3dcolscheme},
see option @option{-dataelt3dcolscheme}
}

@opt{-datapointtrs, real,
Set the transparency of the points.  Provide as argument a
value that applies to all points or @samp{file(@var{file_name})} to load
values from a file.
,
0 to 1, 0}

@opt{-datapointedgerad, real,
Set the radius of the edges of the points.
,
any, 0}

@opt{-datapointedgecol, char_string,
Set the color of the edges of the points.
Provide as argument the name of a color that will be used for all
points (@pxref{Colors and Color Maps}).
,
any, black}

@opt{-datapointscale, char_string,
Set the scale relative to the @samp{-datapointcol real} data.  See option
@option{-dataelt3dscale} for the argument format.
,
any, data minimum:data maximum
}

@opt{-datapointscaletitle, char_string,
Set the title of the scale relative to the @samp{-datapointcol real} data.
,
any, none
}

@subsection Coordinate System Rendering

@opt{-datacsyscoo, char_string,
Set the coordinates of the origin of the coordinate system.
Combine the coordinates with @samp{@SEPDEP{}}.
,
any, 0@SEPDEP{}0@SEPDEP{}0}

@opt{-datacsyslength, real,
Set the length of the coordinate system axes.
,
any, 0.2}

@opt{-datacsysrad, real,
Set the radius of the coordinate system axes.
,
any, 0.01}

@opt{-datacsyslabel, char_string,
Set the labels of the coordinate system axes.
Combine the labels with @samp{@SEPDEP{}}.
,
any, X1@SEPDEP{}X2@SEPDEP{}X3}

@opt{-datacsyscol, char_string,
Set the color of the coordinate system. Provide as argument any color as
detailed in @ref{Colors and Color Maps}.
,
any, 32|32|32}

@subsection Slice Settings

@opt{-slicemesh, char_string,
Plot one (or several) slice(s) of the mesh.  Provide
as argument the equation(s) of the plane(s)@comma{} under the form
@samp{@var{a}*x+@var{b}*y+@var{c}*z=@var{d}} or any equivalent
mathematical expression. Combine with @samp{@SEPNODEP{}}.
,
any, none}

@subsection Show Settings

The following options apply to the full tessellations or mesh.

@opt{-showtess, logical,
Show or hide the tessellation.
,
0 or 1, 1 if tess loaded and mesh not loaded@comma{} and 0 otherwise}

@opt{-showtesr, logical,
Show or hide the raster tessellation.
,
0 or 1, 1 if tesr loaded and mesh not loaded@comma{} and 0 otherwise}

@opt{-showmesh, logical,
Show or hide the mesh.
,
0 or 1, 1 if mesh loaded and slice not loaded@comma{} and 0 otherwise}

@opt{-showmeshslice, logical,
Show or hide the mesh slice(s).
,
0 or 1, 1 if slice(s) exist(s) and 0 otherwise}

@opt{-showpoint, logical or char_string,
Show or hide the points.
To show only specific points@comma{} provide
@samp{file(@var{file_name})} to load point numbers from a
file.
,
0 or 1, 1 if points exist and 0 otherwise}

The following option applies to the cells of a tessellation or a raster
tessellation, independently of its dimension,

@opt{-showcell, char_string,
Specify the cells to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load cell identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Tessellation Keys} or @ref{Raster Tessellation Keys}.
,
any, all}

@need 800
For a tessellation, it is also possible to set the visibility on a per-entity
basis,

@opt{-showpoly, char_string,
Specify the polyhedra to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load polyhedron identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Tessellation Keys}.
,
any, all}

@opt{-showface, char_string,
Specify the faces to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load face identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Tessellation Keys}. The following specific keys are also available:
@samp{cell_shown} and @samp{poly_shown}.
,
any, none}

@opt{-showedge, char_string,
Specify the edges to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load edge numbers from a
file@comma{} or any expression based on the keys listed in
@ref{Tessellation Keys}. The following specific keys are also available:
@samp{cell_shown}@comma{} @samp{poly_shown} and
@samp{face_shown}.
,
any, @code{cell_shown}}

@opt{-showver, char_string,
Specify the vertices to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load vertex numbers from a
file@comma{} or any expression based on the keys listed in
@ref{Tessellation Keys}. The following specific keys are also available:
@samp{cell_shown}@comma{} @samp{poly_shown}@comma{}
@samp{face_shown} and @samp{edge_shown}.
,
any, none}

@opt{-showseed, char_string,
Specify the seeds to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load seed numbers from a
file@comma{} or any expression based on the keys listed in
@ref{Tessellation Keys}. The following specific key is also available:
@samp{cell_shown}.
,
any, none}

@optsec{-showfaceinter, logical,
Show the interpolations of the tessellation faces (if any).
The interpolation edges are printed in gray with a radius equal to
the radius of the face edges.
,
0 or 1, 0}

For a raster tessellation, it is possible to set the visibility of the
individual voxels of the tessellation, of the individual voxels that
are void (that do not belong to any cell), and of the raster tessellation edges
(just as for a tessellation, but based on the voxel edges).

@opt{-showvox, char_string,
Specify the (non-void) voxels to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load voxel identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Raster Tessellation Keys}.
,
any, all}

@opt{-showvoidvox, char_string,
Specify the void voxels to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load voxel identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Raster Tessellation Keys}.
,
any, all}

@opt{-showedge, char_string,
Specify the edges to show. The argument can be: @samp{all} for all@comma{}
@samp{none} for none@comma{} or any expression based on the keys listed in
 @ref{Raster Tessellation Keys}.
,
any, none}

The following options apply to the entities of the mesh.
The options apply to 3D elements (@samp{elt3d}) and element sets
(@samp{elset3d}), 2D elements (@samp{elt2d}) and element sets
(@samp{elset2d}), 1D elements (@samp{elt1d}) and element sets
(@samp{elset1d}), 0D elements (@samp{elt0d}) and element sets
(@samp{elset0d}), and nodes (@samp{nodes}). Also note that the
@samp{elt} and @samp{elset} labels can be used in place of
@samp{elt@var{n}d} and @samp{elset@var{n}d}, where @code{@var{n}} is the
highest
mesh dimension.  This enables the use of the same command whatever the
highest mesh dimension is.

In the following option descriptions, note that any options can be
applied to element @emph{sets} by changing @samp{elt} to @samp{elset}.

@kindex -showelt
@kindex -showelset

@kindex -showelset3d
@opt{-showelt3d, char_string,
Specify the 3D elements to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load element identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Mesh Keys}.
,
any, all if highest mesh dim. is 3 and none otherwise}

@kindex -showelset2d
@opt{-showelt2d, char_string,
Specify the 2D elements to show. The argument can be: @samp{all} for
all@comma{} @samp{none} for none@comma{}
@samp{file(@var{file_name})} to load element identifiers from
a file@comma{} or any expression based on the keys listed in
@ref{Mesh Keys}. The following specific key is also available:
@samp{elt3d_shown}.
,
any, all if highest mesh dim. is 2 and none otherwise}

@kindex -showelset1d
@opt{-showelt1d, char_string,
Specify the 1D elements to show. The argument can be: @samp{all} for all
@comma{} @samp{none} for none@comma{} @samp{file(@var{file_name})} to load
element numbers from a file@comma{} or any expression based on the keys
listed in @ref{Mesh Keys}. The following specific keys are also available:
@samp{elt2d_shown} and @samp{elt3d_shown}.
,
any, all if highest mesh dim. is 1 and none otherwise}

@kindex -showelset0d
@opt{-showelt0d, char_string,
Specify the 0D elements to show. The argument can be: @samp{all} for all
@samp{none} for none@comma{} @samp{file(@var{file_name})} to load
element numbers from a file@comma{} or any expression based on the keys
listed in @ref{Mesh Keys}. The following specific keys are also available:
@samp{elt1d_shown}@comma{} @samp{elt2d_shown}
and @samp{elt3d_shown}.
,
any, all if highest mesh dim. is 0 and none otherwise}

@opt{-shownode, char_string,
Specify the nodes to show. The argument can be: @samp{all} for all
@comma{} @samp{none} for none@comma{} @samp{file(@var{file_name})} to load
node numbers from a file@comma{} or any expression based on the keys
listed in @ref{Mesh Keys}. The following specific keys are also available:
@samp{elt0d_shown}@comma{} @samp{elt1d_shown}@comma{}
@samp{elt2d_shown} and @samp{elt3d_shown}.
,
any, none}

@opt{-showcsys, logical,
Show the coordinate system.
,
0 or 1, 0}

@opt{-showshadow, logical,
Show the shadows.  If you want colors not affected by shadowing@comma{} switch this
option off.
,
0 or 1, 1 in 3D and 0 in 2D}

@subsection Camera Settings

@opt{-cameracoo, char_string:char_string:char_string,
Specify the camera coordinates. By default@comma{} the camera is shifted
by @dfn{length} times a vector @dfn{v} from the centre of
the bounding box of the tessellation or mesh.  The variable @dfn{length}
is the average length of the bounding box (1 for a unit cube)@comma{}
and the coordinates of vector @var{v} are
denoted as @dfn{vx}@comma{} @dfn{vy} and @dfn{vz} (@w{= 3.462}@comma{}
-5.770 and 4.327@comma{} respectively@comma{} in 3D@comma{} and
0@comma{} 0 and 8@comma{} respectively@comma{} in 2D).
The coordinates of the tessellation or mesh centre are denoted as
@dfn{x}@comma{} @dfn{y} and @dfn{z} (if both a tessellation and a mesh
have been loaded@comma{} the mesh is considered).  Provide as argument
the expression for the 3 coordinates@comma{} combined with @samp{@SEPDEP{}}.
,
any, @code{x+length*vx@SEPDEP{}y+length*vy@SEPDEP{}z+length*vz}}

@opt{-cameralookat, char_string:char_string:char_string,
Specify the camera look-at point.
By default@comma{} the point is the
tessellation or mesh centre.
The coordinates of the tessellation or mesh centre are denoted as
@dfn{x}@comma{} @dfn{y} @w{and @dfn{z}} (if both a tessellation and a mesh
have been loaded@comma{} the mesh is considered).  Provide as argument
the expression for the 3 coordinates@comma{} combined with @samp{@SEPDEP{}}.
,
any, @code{x@SEPDEP{}y@SEPDEP{}z}}

@opt{-cameraangle, real,
Specify the opening angle of the camera along the horizontal direction
(in degrees). The opening angle along the vertical direction is determined
from the opening along the horizontal direction and the image size ratio.
,
any, 25}

@opt{-camerasky, real:real:real,
Specify the sky vector of the camera (vertical direction).
Provide as argument the coordinates combined with @samp{@SEPDEP{}}.
,
any,0@SEPDEP{}1@SEPDEP{}0 in 2D and 0@SEPDEP{}0@SEPDEP{}1 in 3D}

@opt{-cameraprojection, char_string,
Specify the type of projection of the camera.
,
perspective or orthographic, perspective for 3D and orthographic for
2D}

@subsection Output Image Settings

@opt{-imagesize, int:int,
Specify the size of the image (in pixels).
Provide as argument the width and height@comma{} combined with
@samp{@SEPDEP{}}.
,
any, 1200:900}

@opt{-imagebackground, char_string,
Specify the color of the background. Provide as argument any color as
detailed in @ref{Colors and Color Maps}.
,
any, white}

@opt{-imageantialias, logical,
Use antialiasing to produce a smoother image.  Switch antialiasing off
for faster image generation or smaller image file.
,
0 or 1, 1}

@opt{-imageformat, char_string,
Specify the output image format.
It can be
the PNG @w{format (@file{png})}@comma{}
the POV-Ray @w{format (@file{pov})} or
the VTK @w{format (@file{vtk})}.
Use @samp{pov:objects} to get a POV-Ray file containing only the objects@footnote{Not compatible with @samp{png}; the resulting file can be loaded with @option{-includepov}.}.
Combine with @samp{@SEPNODEP{}}.
,
see above, png}

@subsection Scripting

@opttwo{-loop, -endloop, -loop char_string real real real ... , -endloop,
Create a loop of commands.  Provide as argument the name of the
loop variable@comma{} its initial value@comma{} the loop increment
value@comma{} the final value@comma{} and the commands to execute.
An example of use of the @code{-loop} / @code{-endloop} capability is
provided in the Examples Section.,
any, none}

@subsection Output Options

@opt{-outdir, char_string@SEPNODEP{}char_string@SEPNODEP{}...,
Use this option to set the output directory.
Provide the directory name@comma{} or
@samp{sim_dir} to use the dedicated location of the simulation directory@comma{}
@code{@var{dir.sim}/images/@var{format}}@comma{} where @code{@var{format}} is the image format (see
option @option{-imageformat}). @samp{sim_dir} applies only
if a simulation directory is loaded as input.  Several values can be combined with
@samp{@SEPNODEP{}}@comma{} in which case the first valid value is used.  (To write
to a simulation directory when loaded as input and to the local directory otherwise@comma{}
use @samp{sim_dir,.}@footnote{This may be written to the initialization file.}.)
,
any, "."}

@subsection Print Options

@opt{-print, char_string,
Use this option to print the image.  Provide as argument the file name@comma{} excluding its extension.
,
any, none}

@subsection Advanced Options

@opt{-includepov, char_string:char_string:...,
Use this option to include additional objects to the image@comma{}
under the form of a POV-Ray file. Provide as first argument the name of the
POV-Ray file and as next arguments successive transformations to apply to the
objects of the POV-Ray file.  The transformations can be
@samp{translate(@var{vx}@comma{}@var{vy}@comma{}@var{vz})} for a translation of
vector @math{(vx@comma{}vy@comma{}vz)}@comma{}
@samp{scale(@var{sx}@comma{}@var{sy}@comma{}@var{sz})} for scaling by factors
@math{sx}@comma{} @math{sy} and @math{sz} in the three directions of space@comma{} and
@samp{rotate(@var{thetax}@comma{}@var{thetay}@comma{}@var{thetaz})} for a rotation of angles
@math{thetax}@comma{} @math{thetay} and @math{thetaz} about axes @math{x}@comma{} @math{y}
and @math{z}@footnote{The rotation is read in POV-Ray style; i.e.@comma{} according to
the POV-Ray documentation: @emph{Note that the order of the rotations does
matter.  Rotations occur about the x-axis first@comma{} then the y-axis@comma{}
then the z-axis.  If you are not sure if this is what you want then you should
only rotate on one axis at a time using multiple rotation statements to get a
correct rotation.  Rotation is always performed relative to the axis. Thus if
an object is some distance from the axis of rotation it will not only rotate
but it will orbit about the axis as though it was swinging around on an
invisible string.  POV-Ray uses a left-handed rotation system. Using the famous
"Computer Graphics Aerobics" exercise@comma{} you hold up your left hand and
point your thumb in the positive direction of the axis of rotation.  Your
fingers will curl in the positive direction of rotation. Similarly if you point
your thumb in the negative direction of the axis your fingers will curl in the
negative direction of rotation.}}.
,
any, none}

@section Output Files

The output files are

@itemize
@item PNG file, @file{.png}: a bitmapped image (the alpha channel is
    off).
@item POV-Ray file, @file{.pov}: a POV-Ray script file.
@item VTK file, @file{.vtk}: a VTK file, for interactive visualization.
@end itemize

A PNG image can be obtained from a POV-Ray file by invoking
POV-Ray as follows (see the POV-Ray documentation for details and
further commands),
@code{povray @var{file.pov} +W@var{image_width} +H@var{image_height} -D +A0.2}.

@section Examples

Below are some examples of use of neper -V.

@enumerate
@item Print out tessellation @file{n10-id1.tess} with cells colored
from their identifiers and an image size of
@iftex
@math{900 @times 450}
@end iftex
@ifinfo
900 x 450
@end ifinfo
pixels.
@com{neper -V n10-id1.tess -datacellcol id -imagesize 900:450 -print img}

@item Print out tessellation @file{n10-id1.tess} with cells colored
 from crystal orientations and semi-transparency.
@com{neper -V n10-id1.tess -datacellcol ori -datacelltrs 0.5 -print img}

@item Print out mesh @file{n10-id1.msh} with elements colored from
scalar values written in file @file{v} and a scale ranging from 0 to
100.
@com{neper -V n10-id1.msh -dataeltcol "real:file(v)" -dataeltscale 0:100 \ }
@comx{@ @ @ @ @ @ -print img}

@item Print out mesh @file{n10-id1.msh} with elements colored from
nodal scalar values written in file @file{v} and a scale ranging from 0
to 100.
@com{neper -V n10-id1.msh -datanodecol "real:file(v)" -dataeltcol \ }
@comx{@ @ @ @ @ @ from_nodes -dataeltscale 0:100 -print img}

@item Print out the 10 first cells of a 100-cell tessellation,
 colored from their identifiers and semi-transparency, and with
 edges shown in red and vertices shown as green spheres of radius 0.01.
@com{neper -V n100-id1.tess -showcell "id<=10" \ }
@comx{@ @ @ @ @ @ -datacellcol id -datacelltrs 0.5 \ }
@comx{@ @ @ @ @ @ -showedge cell_shown -showver cell_shown \ }
@comx{@ @ @ @ @ @ -dataverrad 0.01 -dataedgecol red -datavercol green \ }
@comx{@ @ @ @ @ @ -print img}

@item Print out the interior element sets of mesh @file{n100-id1.msh}
and show the 1D elements.
@com{neper -V n100-id1.tess,n100-id1.msh -dataelsetcol id \ }
@comx{@ @ @ @ @ @ -showelset 'body>0' -showelt1d elt3d_shown -print img}

@item Print out 3 slices of mesh @file{n100-id1.msh}.
@com{neper -V n100-id1.msh -dataelsetcol id \ }
@comx{@ @ @ @ @ @ -slicemesh "x=0.5@SEPNODEP{}y=0.5@SEPNODEP{}z=0.5" -print img}

@item Print out slices of mesh @file{n100-id1.msh}, at z coordinates ranging
from 0.1 to 0.9 by step @w{of 0.1}, each slice being printed in a separate
file.
@com{neper -V n100-id1.msh -dataelsetcol id \ }
@comx{@ @ @ @ @ @ -loop Z 0.1 0.1 0.9 \ }
@comx{@ @ @ @ @ @ -slicemesh "z=Z" -print imgZ \ }
@comx{@ @ @ @ @ @ -endloop}

@item Print out a deformed mesh colored by orientations, defined from a simulation directory.
@com{neper -V mysim.sim -simstep 10 -datanodecoo coo \ }
@comx{@ @ @ @ @ @ -dataeltcol ori -print img}

@item Print out a deformed mesh colored by orientations, defined from a simulation directory; generate an image at each deformation step.
@com{neper -V mysim.sim -loop STEP 0 1 10 -simstep STEP -datanodecoo coo \ }
@comx{@ @ @ @ @ @ -dataeltcol ori -print imgSTEP -endloop}

@end enumerate
