@c This file is part of the Neper software package.
@c Copyright (C) 2003-2020 Romain Quey
@c See the COPYING file in the top-level directory.

@node Introduction
@chapter Introduction

@section The Neper Project

@subsection Description

Neper is a software package for polycrystal generation and meshing.  The polycrystals can be 2D or 3D. Neper is built around four modules:

@itemize @bullet
@item @MT{} generates polycrystals as tessellations.  The two main capabilities are: @emph{(i)} the generation of tessellations from cell properties (e.g.@ a size distribution) and @emph{(ii)} the generation of multiscale tessellations (i.e.@ including cell subdivisions).  These capabilities can also be used together.  Tessellations are Laguerre (or Voronoi) tessellations and are therefore composed of convex cells.  Once generated, the tessellations can be ``regularized'' by removing their smallest features (edges and faces), which then enables good-quality meshing with @mM{}.  Periodicity conditions can be prescribed.  Crystal orientations are provided for the cells.  The output is a tessellation file written at a scalar (vectorial) or raster format.  Scalar tessellations are intended to be passed to modules -M and -V while raster tessellations can be used by FFT solvers.

@item @MM{} meshes polycrystals described as tessellation files. Two meshing techniques are available: free (or unstructured) meshing, which generates triangular elements (in 2D) or tetrahedral elements (in 3D) that follow the grain shapes, and mapped meshing, which generates regular, square elements (in 2D) or regular, cubic elements (in 3D) that do not necessarily follow the grain shapes.  Free meshing into good-quality elements is ensured by optimized meshing rules, and multimeshing---a complementary use of several meshing algorithms.  Remeshing is also available and is similar to meshing except that it takes a mesh as input.  Cohesive elements can be inserted at interfaces.  The output is a mesh file written in the .msh format, which can be readily used by Neper's companion program, the FEPX finite-element crystal-plasticity software package, or other formats.

@item @MS{} works in conjunction with FEPX to generate a simulation directory.  It reformats the FEPX raw simulation results and includes various post-processing capabilities to compute new results. The resulting simulation directory can be loaded as input in @mV{}.

@item @MV{} generates publication-quality PNG images or VTK files (for interactive visualization) of tessellations, meshes and simulation results.  The results can be defined from internal data, data loaded from external files, or a simulation directory as generated by @mS{}.  For PNG images, the coloring and transparency of the different entities can be set up in great detail, and slice views can be plotted.

@end itemize

Neper strives to be an easy-to-use, efficient and robust tool.  All the input data are prescribed non-interactively, using command lines and / or ASCII files, so that all treatments can be automated.

@subsection Resources and Support

Several, complementary resources describing Neper are available:

@itemize
@item The Neper reference manual, which is this document, describes all Neper's capabilities.  Each module is dedicated a specific chapter, which describes the available commands and result files, and provides examples.  The manual is available at the PDF and info formats.@footnote{Provided that the info file is properly installed at your site, it can be accessed by the command: @command{info neper}.}

@item The Neper website, @url{https://neper.info}, gives a general introduction to Neper (including examples with illustrations) and is where Neper can be downloaded from.  Official versions are released on the website every few months, as zipped tarballs (@file{tgz} files).


@item The Neper GitHub repository, @url{https://github.com/rquey/neper}, is where the latest version is available and where user interactions take place:

@itemize
@item To get and keep up-to-date with the latest version, clone the repository using

@com{git clone https://github.com/rquey/neper.git}

which gives access to the latest stable development release on the default, @code{main} branch. To update your local repository, run @command{git pull} from within the repository.

@item To report bugs, use the issue tracker, @url{https://github.com/rquey/neper/issues}. When reporting bugs, please provide a minimal working example and the Neper terminal output.

@item To ask questions, share comments or request new features, use discussions, @url{https://github.com/rquey/neper/discussions}.

@end itemize

@item The three Neper reference papers,
  @itemize
  @item ``@cite{R.@ Quey, P.R.@ Dawson and F.@ Barbe, Large-scale 3D random
  polycrystals for the finite element method: Generation, meshing and
  remeshing, Comput.@ Methods Appl.@ Mech.@ Engrg., vol.@ 200, pp.@
  1729-1745, 2011}'' describes the @w{regularization /} meshing
  methodologies.  It can be downloaded from the Neper homepage or directly
  from this link:
  @url{https://neper.info/docs/neper-reference-paper.pdf};
  @item ``@cite{R.@ Quey and L.@ Renversade, Optimal polyhedral description of 3D
  polycrystals: Method and application to statistical and synchrotron X-ray
  diffraction data, Comput.@ Methods Appl.@ Mech.@ Engrg., vol.@ 330, pp.@
  308-333, 2018}'' describes tessellation generation from experimental properties;
  @item ``@cite{R.@ Quey, A.@ Villani and C.@ Maurice, Nearly uniform sampling
  of crystal orientations, J.@ Appl.@ Crystallogr., vol. 51, pp.@ 1162-1173, 2018.}''
  describes uniform sampling of crystal orientations.
  @end itemize

@end itemize

@c @sp 1
The @code{neper-announce} (@url{https://lists.sourceforge.net/lists/listinfo/neper-announce}) and @code{neper-users} (@url{https://lists.sourceforge.net/lists/listinfo/neper-users}) mailing lists are no longer active.

Resources for FEPX can be accessed from @url{https://fepx.info}.

@section Installing Neper

Neper is written in (mostly ANSI) C and a little C++, and it can run on any Unix-like system (including MacOS).  Neper also runs on Microsoft Windows using the Windows subsystem for Linux (WSL), the Ubuntu app or similar solutions, but multithreading must be turned off (which also slows down execution significantly).  Multithreading of the code is achieved via OpenMP and operates on all threads (the actual number of threads can be set throught the @code{@var{OMP_NUM_THREADS}} environment variable).  Compilation is performed via CMake:

@itemize
@item Create a @file{build} directory, for instance as a subdirectory of Neper's @file{src} directory

@com{mkdir build}

@item Run CMake from within the @file{build} directory, pointing to Neper's
@file{src} directory

@com{cd build}
@com{cmake ..@ @ @ @ (on Windows: cmake -DHAVE_OPENMP=OFF ..)}

@item Build Neper

@com{make}

Use option @option{-j} for a multithreaded compilation.

@item Install Neper on your system (as root)
@com{make install}

@end itemize

This procedure uses the default configuration options and should work out-of-the-box if the required dependencies are available in standard system locations.  If needed, a finer configuration of which dependencies are included can be achieved, before building Neper, by setting variables @code{HAVE_@var{DEPENDENCY}}, where @code{@var{DEPENDENCY}} is the name of the dependency. This can be done using

@comc{ccmake ..@ @ @ , (for an interactive command-line tool)}

or

@comc{cmake-gui .., (for an interactive graphical tool)}

or directly at the command line, by using @code{cmake}'s @code{-D} option,

@com{cmake -DHAVE_@var{DEPENDENCY1}=@{ON,OFF@} -DHAVE_@var{DEPENDENCY2}=@{ON,OFF@} ..}

The dependencies which are (optionally) necessary at compilation time and must be (optionally) installed on your system before Neper is compiled are the following:

@itemize

@item The GNU Scientific Library (GSL, mandatory, variable @samp{HAVE_GSL}).  It is likely to be available on your system or from your system package manager (binary and development packages); alternatively, the source code version can be downloaded from @uref{https://www.gnu.org/software/gsl}.

@item The NLopt library (version @code{2.6.0} or higher, optional, enabled by default, variable @samp{HAVE_NLOPT}).  It is needed by @mT{} for tessellation generation from cell properties. It is likely to be available on your system or from your system package manager (binary and development packages); alternatively, the source code version can be downloaded from @uref{https://nlopt.readthedocs.io}.

@item The OpenMP library (optional, enabled by default, variable @samp{HAVE_OPENMP}).  It is likely to be available on your system or from your system package manager.@footnote{On Mac, install @code{llvm} and @code{libomp} via Homebrew.}

@item The libScotch library (version @code{6.0.0} or higher, optional, disabled by default, variable @samp{HAVE_LIBSCOTCH}).  It is needed by @mM{} for mesh partitioning.  The source code can be downloaded from @url{https://www.labri.fr/perso/pelegrin/scotch}.

@item The pthread library (mandatory if libScotch is enabled). It is likely to be available on your system or from your system package manager.

@end itemize

Other dependencies are only needed at run-time (they are not necessary for compilation):

@itemize

@item The Gmsh program (version @code{2.4.2} or higher, excluding version @code{2.5.1}, mandatory for @mM{}). Both binary and source-code versions can be downloaded from @url{https://gmsh.info} (compiling from the source code significantly speeds up meshing).  Gmsh must be available at the terminal as the command @command{gmsh}, or the path to its binary must be specified with option @option{-gmsh} (in @mM{}).

@item The POV-Ray program (version @code{3.7} or higher, mandatory for module -V).  It is likely to be available on your system or from your system package manager (binary package); alternatively, a binary, or the source code, can be downloaded from @url{http://www.povray.org}.  POV-Ray must be available at the terminal as the command @command{povray}, or the path to its binary must be specified with option @option{-povray} (in @mV{}).

@end itemize

Other third-party libraries are directly included in the source code (see directory @file{src/contrib}) and are not dependencies @emph{per se}:

@itemize
@item The tinycolormap library (@url{https://github.com/yuki-koyama/tinycolormap}).

@item The nanoflann library (@url{https://github.com/jlblancoc/nanoflann}).

@item The muparser library (@url{https://beltoforion.de/en/muparser}).

@item The openGJK library (@url{https://github.com/MattiaMontanari/openGJK}).

@end itemize


Finally, the Neper installation can be tested out by
running
@com{make test}

or (equivalently)
@com{ctest}

@c Moreover, the documentation can be installed as an @file{info} file.  On
@c most systems, this can be achieved simply by copying the file
@c @file{neper.info} into an info directory (usually @file{/usr/info},
@c @file{/usr/local/info} or @file{/usr/doc/info}).

@section Getting Started

The @samp{neper} binary must be run in a terminal, followed by a list of arguments,

@com{neper @var{list_of_arguments}}

Neper returns messages in the terminal and results in ASCII (optionally binary) files.

The list of arguments describes the problem to solve.  There are several
general-purpose, self-explanatory arguments:

@kindex --help
@kindex --version
@kindex --license
@com{neper --help}
@com{neper --version}
@com{neper --license}

The following of this section provides information on how to call Neper's modules,
properly format option arguments and set up an initialization file.

@subsection Modules

To call a module, run
@com{neper @var{module_name} @var{module_arguments}}

where the module name can be @option{-T}, @option{-M}, @option{-S} or @option{-V}, and the module arguments can include both required input data and options.  Input data (when not a file name) and options start @w{by @samp{-}}.  Options can be provided in arbitrary order, each of them being followed by a single argument (containing no space).
String completion is available for all options, so they may be abbreviated as long as the abbreviation is not ambiguous. For instance, in module @code{-T}, option @option{-regularization} can be abbreviated to @option{-reg}. In the rare cases where an argument contains shell metacharacters (most commonly @samp{(}, @samp{)}, @samp{?}, etc.), it must be enclosed in either single or double quotes to be read in properly (note that only double quotes enable variable substitution by the shell). Logical options can be enabled or disabled by providing argument @w{values of @samp{1}} @w{or @samp{0}}, respectively.  Integer or real arguments can be written as numeral values, or mathematical or logical expressions (@pxref{Mathematical and Logical Expressions}).  For instance, in @mT{}, option @samp{@w{-rcl 0.5}} can also be written as @samp{@w{-rcl 1/2}} or @samp{@w{-rcl "cos(pi/3)"}}.  For some options, different values can be specified to different entities by loading them from an external file, using an argument of the form @samp{"file(@var{file_name})"}.  The file must contain the expected number of values and can be arbitrarily formatted in terms of delimiters (spaces, tabs or newlines).  For the more complex case of a multiscale tessellation, a @var{multiscale cell file} can also be used, for which details are provided in @ref{Multiscale Cell File}.
@c
@MV{} shows some exceptions with respect to these rules: the argument cannot be listed in arbitrary order, string completion is not available, and option @option{-loop} takes several arguments.

@subsection Argument Separators

Some options may take several argument values.  These values can be combined using @dfn{separators} (see @ref{Tessellation Module (-T)}, @ref{Meshing Module (-M)}, @ref{Simulation Module (-S)} and @ref{Visualization Module (-V)} for details on each option).  There are three possible separators:

@itemize
@item The @samp{@SEPNODEP} separator combines uncorrelated arguments, i.e.@ arguments of the same type, which can be processed independently from each other, in any order.  This is for example the case of output file formats.

@item The @samp{@SEPDEP} separator is used to combine correlated arguments, i.e.@ arguments of different types, which cannot be processed independently from each other and must be processed in order.  This is for example the case of the values of a variable in different directions.

@item The @samp{::} separator is used in @mT{} (and a little in @mM{}) for assigning argument values to the different scales of a multiscale tessellation.  It is a ``super-separator'' that takes precedence over the @samp{@SEPNODEP} and @samp{@SEPDEP} standard separators.

@end itemize

@subsection Initialization File

When Neper is run, it starts by reading commands from an initialization file, @file{$HOME/.neperrc}, if that file exists.  Another initialization file can be specified with option @option{--rcfile}, before calling a module,

@com{neper --rcfile @var{my_file} @var{module_name module_arguments}}

The reading of an initialization file can be disabled use option @samp{--rcfile none}.

When a Neper module is called, Neper looks for the occurrence of @samp{neper @var{module_name}} in the initialization file and then reads all arguments until the next occurrence of @samp{neper} (which should denote the beginning of another module option field) or the end of the file.  The arguments may be any legal arguments but are typically limited to frequently-used options.  Moreover, any field of comments can be preceded by @samp{neper comments}.

@c @medskip
Here is the example of an initialization file, featuring its syntax (parts beginning with @samp{<-- } do not belong to the file):

@c @cartouche
@sp 1
@example
@c @group
neper comments --------------------------------------  <-- comment
This is my initialization file.                        <-- comment
                                                       <-- comment
        It's pretty incomplete though...               <-- comment
                                                       <-- comment
neper -T -reg 1                                        <-- neper -T option
neper -M -gmsh my_gmsh_path                            <-- neper -M option
     -order 2                                          <-- neper -M option
                                                       <-- comment
neper comments                                         <-- comment
        Remember to add what I don't remember!         <-- comment
neper -V -povray my_povray_path                        <-- neper -V option
neper comments --------------------------------------  <-- comment
@c @end group
@end example
@sp 1
@c @end cartouche

@c @medskip
If the initialization file is not found, or if @samp{neper @var{module_name}} is not found inside it, Neper will consider only the command line arguments.  Also, if an argument is initialized several times (for instance, both in the initialization file and at the command line), only the last specified value is used.

@section Reading this Manual

This manual is maintained as a Texinfo manual.  Here are the writing conventions used in the document:

@itemize
@item A command that can be typed in a terminal is printed like @command{this}, or, in the case of a major command, like

@comc{this,;}

where @samp{$} denotes the terminal prompt.
@item A program (or command) option is printed like @option{this};
@item The name of a variable is printed like @code{this};
@item A meta-syntactic variable (i.e.@: something that stands for another piece of text) is printed like @var{this};
@item Literal examples are printed like @samp{this};
@item File names are printed like @file{this}.
@end itemize

Module arguments are tagged by type and importance level:

@itemize
@item Prerequisites are tagged @w{`[Prerequisite]'}---they should be
placed in the initialization file;
@item Input data are tagged @w{`[Input Data]'};
@item Standard options are tagged @w{`[Option]'};
@item Secondary options, which should be used only for fine-tuning and
if you really know what you are doing, are tagged @w{`[Secondary option]'};
@item Post-processing options are tagged @w{`[Post-processing]'}.
@end itemize

Some options take optional or repeated arguments, conventionally
specified by using square brackets and ellipses: an argument enclosed
within square brackets is optional, and an argument followed by an
ellipsis is optional and may be repeated more than once.

@need 800
Some abbreviations are used consistently for options and contribute to Neper's
jargon:

@multitable @columnfractions 0.2 0.6
@item @code{algo} 	@tab algorithm
@item @code{arch} 	@tab architecture
@item @code{aspratio} 	@tab aspect ratio
@item @code{cl}   	@tab characteristic length
@item @code{col} 	@tab color or column
@item @code{conv}	@tab convergence
@item @code{coo}	@tab coordinate
@item @code{crysym}  	@tab crystal symmetry
@item @code{csys}	@tab coordinate system
@item @code{diameq}  	@tab equivalent diameter
@item @code{dim}  	@tab dimension
@item @code{dis}  	@tab distribution or distortion
@item @code{dof}	@tab degree of freedom
@item @code{dup}	@tab duplicate(d)
@item @code{elset} 	@tab element set
@item @code{elt}   	@tab element
@item @code{expr}  	@tab expression
@item @code{fact} 	@tab factor
@item @code{faset} 	@tab element face set
@item @code{geo}   	@tab geometry
@item @code{id}    	@tab identifier
@item @code{ini} 	@tab initial
@item @code{inf} 	@tab infinity
@item @code{inter} 	@tab interpolation
@item @code{iter}  	@tab iteration
@item @code{max}   	@tab maximum
@item @code{min}   	@tab minimum
@item @code{morpho} 	@tab morphology
@item @code{neigh} 	@tab neighbor
@item @code{nset}  	@tab node set
@item @code{opti} 	@tab optimization
@item @code{ori}   	@tab orientation
@item @code{part}  	@tab partition
@item @code{poly}  	@tab polyhedron
@item @code{pov} 	@tab POV-Ray file
@item @code{qual}  	@tab quality
@item @code{rad} 	@tab radius
@item @code{rcl} 	@tab relative characteristic length
@item @code{res} 	@tab resolution
@item @code{rmax}   	@tab relative maximum
@item @code{sing} 	@tab singular
@item @code{stat}  	@tab statistics
@item @code{surf}  	@tab surface
@item @code{tesr}  	@tab raster tessellation
@item @code{tess}  	@tab scalar tessellation
@item @code{tmp}   	@tab temporary
@item @code{trs} 	@tab transparency
@item @code{val}   	@tab value
@item @code{var}   	@tab variable
@item @code{ver}   	@tab vertex
@end multitable
